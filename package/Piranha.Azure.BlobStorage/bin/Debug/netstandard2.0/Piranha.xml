<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Piranha</name>
    </assembly>
    <members>
        <member name="T:Piranha.Api">
            <summary>
            The main application api.
            </summary>
        </member>
        <member name="F:Piranha.Api._cache">
            <summary>
            The private model cache.
            </summary>
        </member>
        <member name="P:Piranha.Api.Aliases">
            <summary>
            Gets the alias service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Archives">
            <summary>
            Gets the archive service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Content">
            <summary>
            Gets the content service.
            </summary>
        </member>
        <member name="P:Piranha.Api.ContentGroups">
            <summary>
            Gets the content group service.
            </summary>
        </member>
        <member name="P:Piranha.Api.ContentTypes">
            <summary>
            Gets the content type service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Languages">
            <summary>
            Gets the language service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Media">
            <summary>
            Gets the media service.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Piranha.Api.Pages">
            <summary>
            Gets the page service.
            </summary>
        </member>
        <member name="P:Piranha.Api.PageTypes">
            <summary>
            Gets the page type service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Params">
            <summary>
            Gets the param service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Posts">
            <summary>
            Gets the post service.
            </summary>
        </member>
        <member name="P:Piranha.Api.PostTypes">
            <summary>
            Gets the post type service.
            </summary>
        </member>
        <member name="P:Piranha.Api.Sites">
            <summary>
            Gets the site service.
            </summary>
        </member>
        <member name="P:Piranha.Api.SiteTypes">
            <summary>
            Gets the site type service.
            </summary>
        </member>
        <member name="P:Piranha.Api.IsCached">
            <summary>
            Gets if the current repository has caching enabled or not.
            </summary>
        </member>
        <member name="M:Piranha.Api.#ctor(Piranha.Services.IContentFactory,Piranha.Repositories.IAliasRepository,Piranha.Repositories.IArchiveRepository,Piranha.Repositories.IContentRepository,Piranha.Repositories.IContentGroupRepository,Piranha.Repositories.IContentTypeRepository,Piranha.Repositories.ILanguageRepository,Piranha.Repositories.IMediaRepository,Piranha.Repositories.IPageRepository,Piranha.Repositories.IPageTypeRepository,Piranha.Repositories.IParamRepository,Piranha.Repositories.IPostRepository,Piranha.Repositories.IPostTypeRepository,Piranha.Repositories.ISiteRepository,Piranha.Repositories.ISiteTypeRepository,Piranha.ICache,Piranha.IStorage,Piranha.IImageProcessor,Piranha.ISearch)">
            <summary>
            Creates a new api from the currently registered
            repositories.
            </summary>
        </member>
        <member name="M:Piranha.Api.Dispose">
            <summary>
            Disposes the current api.
            </summary>
        </member>
        <member name="T:Piranha.App">
            <summary>
            The main application object.
            </summary>
        </member>
        <member name="F:Piranha.App.Instance">
            <summary>
            The singleton app instance.
            </summary>
        </member>
        <member name="F:Piranha.App._mutex">
            <summary>
            Mutex for thread safe initialization.
            </summary>
        </member>
        <member name="F:Piranha.App._isInitialized">
            <summary>
            If the app has been initialized.
            </summary>
        </member>
        <member name="F:Piranha.App._blocks">
            <summary>
            The currently registered blocks.
            </summary>
        </member>
        <member name="F:Piranha.App._fields">
            <summary>
            The currently registered fields.
            </summary>
        </member>
        <member name="F:Piranha.App._modules">
            <summary>
            The currently registered modules.
            </summary>
        </member>
        <member name="F:Piranha.App._mediaTypes">
            <summary>
            The currently registered media types.
            </summary>
        </member>
        <member name="F:Piranha.App._serializers">
            <summary>
            The currently registered serializers.
            </summary>
        </member>
        <member name="F:Piranha.App._hooks">
            <summary>
            The currently registered hooks.
            </summary>
        </member>
        <member name="F:Piranha.App._permissions">
            <summary>
            The currently registered permissions;
            </summary>
        </member>
        <member name="F:Piranha.App._cacheLevel">
            <summary>
            The current cache level.
            </summary>
        </member>
        <member name="F:Piranha.App._markdown">
            <summary>
            The application markdown converter.
            </summary>
        </member>
        <member name="F:Piranha.App._contentGroups">
            <summary>
            The currently available content group.
            </summary>
        </member>
        <member name="F:Piranha.App._contentTypes">
            <summary>
            The currently available content types.
            </summary>
        </member>
        <member name="F:Piranha.App._pageTypes">
            <summary>
            The currently available page types.
            </summary>
        </member>
        <member name="F:Piranha.App._postTypes">
            <summary>
            The currently available post types.
            </summary>
        </member>
        <member name="F:Piranha.App._siteTypes">
            <summary>
            The currently available post types.
            </summary>
        </member>
        <member name="P:Piranha.App.Blocks">
            <summary>
            Gets the currently registered block types.
            </summary>
        </member>
        <member name="P:Piranha.App.Fields">
            <summary>
            Gets the currently registered field types.
            </summary>
        </member>
        <member name="P:Piranha.App.Modules">
            <summary>
            Gets the currently registered modules.
            </summary>
        </member>
        <member name="P:Piranha.App.MediaTypes">
            <summary>
            Gets the currently registered media types.
            </summary>
        </member>
        <member name="P:Piranha.App.Markdown">
            <summary>
            Gets the markdown converter.
            </summary>
        </member>
        <member name="P:Piranha.App.PropertyBindings">
            <summary>
            Gets the binding flags for retrieving a region from a
            strongly typed model.
            </summary>
        </member>
        <member name="P:Piranha.App.Serializers">
            <summary>
            Gets the currently registered serializers.
            </summary>
        </member>
        <member name="P:Piranha.App.Hooks">
            <summary>
            Gets the currently registered hooks.
            </summary>
        </member>
        <member name="P:Piranha.App.Permissions">
            <summary>
            Gets the currently registered permissions.
            </summary>
        </member>
        <member name="P:Piranha.App.CacheLevel">
            <summary>
            Gets/sets the current cache level.
            </summary>
        </member>
        <member name="P:Piranha.App.ContentGroups">
            <summary>
            Gets the currently available content groups.
            </summary>
        </member>
        <member name="P:Piranha.App.ContentTypes">
            <summary>
            Gets the currently available content types.
            </summary>
        </member>
        <member name="P:Piranha.App.PageTypes">
            <summary>
            Gets the currently available page types.
            </summary>
        </member>
        <member name="P:Piranha.App.PostTypes">
            <summary>
            Gets the currently available page types.
            </summary>
        </member>
        <member name="P:Piranha.App.SiteTypes">
            <summary>
            Gets the currently available page types.
            </summary>
        </member>
        <member name="M:Piranha.App.#cctor">
            <summary>
            Static constructor. Called once every application
            lifecycle.
            </summary>
        </member>
        <member name="M:Piranha.App.#ctor">
            <summary>
            Default private constructor.
            </summary>
        </member>
        <member name="M:Piranha.App.Init(Piranha.IApi)">
            <summary>
            Initializes the application.
            </summary>
        </member>
        <member name="M:Piranha.App.SerializeObject(System.Object,System.Type)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="type">The type</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:Piranha.App.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the given value.
            </summary>
            <param name="value">The serialized value</param>
            <param name="type">The type</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Piranha.App.InitApp(Piranha.IApi)">
            <summary>
            Initializes the application object.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="T:Piranha.Cache.CacheLevel">
            <summary>
            The different cache levels available.
            </summary>
        </member>
        <member name="T:Piranha.Cache.DistributedCache">
            <summary>
            Simple in memory cache.
            </summary>
        </member>
        <member name="M:Piranha.Cache.DistributedCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Default constructor.
            </summary>
            <param name="cache">The currently configured cache</param>
        </member>
        <member name="M:Piranha.Cache.DistributedCache.Get``1(System.String)">
            <summary>
            Gets the model with the specified key from cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <returns>The cached model, null it wasn't found</returns>
        </member>
        <member name="M:Piranha.Cache.DistributedCache.Set``1(System.String,``0)">
            <summary>
            Sets the given model in the cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <param name="value">The model</param>
        </member>
        <member name="M:Piranha.Cache.DistributedCache.Remove(System.String)">
            <summary>
            Removes the model with the specified key from cache.
            </summary>
            <param name="key">The unique key</param>
        </member>
        <member name="T:Piranha.Cache.MemoryCache">
            <summary>
            Simple in memory cache.
            </summary>
        </member>
        <member name="F:Piranha.Cache.MemoryCache._cache">
            <summary>
            The private memory cache.
            </summary>
        </member>
        <member name="F:Piranha.Cache.MemoryCache._clone">
            <summary>
            If returned objects should be cloned.
            </summary>
        </member>
        <member name="M:Piranha.Cache.MemoryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Default constructor.
            </summary>
            <param name="cache">The currently configured cache</param>
        </member>
        <member name="M:Piranha.Cache.MemoryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="cache">The currently configured cache</param>
            <param name="clone">If returned objects should be cloned</param>
        </member>
        <member name="M:Piranha.Cache.MemoryCache.Get``1(System.String)">
            <summary>
            Gets the model with the specified key from cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <returns>The cached model, null it wasn't found</returns>
        </member>
        <member name="M:Piranha.Cache.MemoryCache.Set``1(System.String,``0)">
            <summary>
            Sets the given model in the cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <param name="value">The model</param>
        </member>
        <member name="M:Piranha.Cache.MemoryCache.Remove(System.String)">
            <summary>
            Removes the model with the specified key from cache.
            </summary>
            <param name="key">The unique key</param>
        </member>
        <member name="T:Piranha.Cache.MemoryCacheWithClone">
            <summary>
            Simple in memory cache.
            </summary>
        </member>
        <member name="M:Piranha.Cache.MemoryCacheWithClone.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Default constructor.
            </summary>
            <param name="cache">The currently configured cache</param>
        </member>
        <member name="T:Piranha.Cache.SimpleCache">
            <summary>
            Simple in memory cache.
            </summary>
        </member>
        <member name="F:Piranha.Cache.SimpleCache._cache">
            <summary>
            The private cache collection.
            </summary>
        </member>
        <member name="F:Piranha.Cache.SimpleCache._clone">
            <summary>
            If returned objects should be cloned.
            </summary>
        </member>
        <member name="M:Piranha.Cache.SimpleCache.Get``1(System.String)">
            <summary>
            Gets the model with the specified key from cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <returns>The cached model, null it wasn't found</returns>
        </member>
        <member name="M:Piranha.Cache.SimpleCache.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="clone">If returned objects should be cloned</param>
        </member>
        <member name="M:Piranha.Cache.SimpleCache.Set``1(System.String,``0)">
            <summary>
            Sets the given model in the cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <param name="value">The model</param>
        </member>
        <member name="M:Piranha.Cache.SimpleCache.Remove(System.String)">
            <summary>
            Removes the model with the specified key from cache.
            </summary>
            <param name="key">The unique key</param>
        </member>
        <member name="T:Piranha.Cache.SimpleCacheWithClone">
            <summary>
            Simple in memory cache.
            </summary>
        </member>
        <member name="M:Piranha.Cache.SimpleCacheWithClone.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Piranha.Config">
            <summary>
            Class for easy access to built-in config parameters.
            </summary>
        </member>
        <member name="F:Piranha.Config._service">
            <summary>
            The private param service.
            </summary>
        </member>
        <member name="F:Piranha.Config.ARCHIVE_PAGE_SIZE">
            <summary>
            The system config keys.
            </summary>
        </member>
        <member name="P:Piranha.Config.ArchivePageSize">
            <summary>
            Gets/sets the currently configured archive page size.
            </summary>
        </member>
        <member name="P:Piranha.Config.CacheExpiresPages">
            <summary>
            Gets/sets the currently configured cache expiration
            in minutes for pages.
            </summary>
        </member>
        <member name="P:Piranha.Config.CacheExpiresPosts">
            <summary>
            Gets/sets the currently configured cache expiration
            in minutes for posts.
            </summary>
        </member>
        <member name="P:Piranha.Config.CommentsApprove">
            <summary>
            Gets/sets if comments should be approved by default.
            </summary>
        </member>
        <member name="P:Piranha.Config.CommentsCloseAfterDays">
            <summary>
            Gets/sets the number of days commenting should be open after publish
            date. A value of 0 means forever.
            </summary>
        </member>
        <member name="P:Piranha.Config.CommentsEnabledForPosts">
            <summary>
            Gets/sets if comments should be enabled by default for posts. The
            default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Config.CommentsEnabledForPages">
            <summary>
            Gets/sets if comments should be enabled by default for pages. The
            default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Config.CommentsPageSize">
            <summary>
            Gets/sets the currently configured page size for comments.
            </summary>
        </member>
        <member name="P:Piranha.Config.HtmlExcerpt">
            <summary>
            Gets/sets if page and post excerpt should be in HTML
            format by default.
            </summary>
        </member>
        <member name="P:Piranha.Config.HierarchicalPageSlugs">
            <summary>
            Gets/sets if hierarchical slugs should be generated when
            creating new pages.
            </summary>
        </member>
        <member name="P:Piranha.Config.ManagerExpandedSitemapLevels">
            <summary>
            Gets/sets the default number of expanded sitemap levels
            in the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Config.ManagerPageSize">
            <summary>
            Gets/sets the page size that should be used for paged lists in the manager.
            </summary>
        </member>
        <member name="P:Piranha.Config.ManagerDefaultCollapsedBlocks">
            <summary>
            Gets/sets if blocks should be collapsed by default in the
            manager interface. Default value is false.
            </summary>
        </member>
        <member name="P:Piranha.Config.ManagerDefaultCollapsedBlockGroupHeaders">
            <summary>
            Gets/sets if block group headers should be collapsed by default in the
            manager interface. Default value is false.
            </summary>
        </member>
        <member name="P:Piranha.Config.ManagerOutlined">
            <summary>
            Gets/sets if elements in the manager should be outline with borders
            to provide stronger visual guidance. The default value is false.
            </summary>
            <value></value>
        </member>
        <member name="P:Piranha.Config.MediaCDN">
            <summary>
            Gets/sets the optional URL for the CDN used. If this param isn't
            null it will be used when generating the PublicUrl for media.
            </summary>
        </member>
        <member name="P:Piranha.Config.PageRevisions">
            <summary>
            Gets/sets the currently configured page revisions that should be saved.
            </summary>
        </member>
        <member name="P:Piranha.Config.PostRevisions">
            <summary>
            Gets/sets the currently configured post revisions that should be saved.
            </summary>
        </member>
        <member name="M:Piranha.Config.#ctor(Piranha.Services.IParamService)">
            <summary>
            Default constructor.
            </summary>
            <param name="paramService">The current param service</param>
        </member>
        <member name="M:Piranha.Config.#ctor(Piranha.IApi)">
            <summary>
            Default constructor.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="M:Piranha.Config.Dispose">
            <summary>
            Disposes the config.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Block">
            <summary>
            Base class for blocks.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Block.Id">
            <summary>
            Gets/sets the id of the block instance.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Block.Type">
            <summary>
            Gets/set the block type id.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Block.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="T:Piranha.Extend.BlockGroup">
            <summary>
            Base class for blocks that can contain other blocks.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockGroup.Items">
            <summary>
            Gets/sets the available blocks in this group.
            </summary>
        </member>
        <member name="M:Piranha.Extend.BlockGroupTypeAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockGroupTypeAttribute.Display">
            <summary>
            Gets/sets how the blocks inside the group should be
            displayed in the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockItemTypeAttribute.Type">
            <summary>
            Gets/sets the type of the accepted child item.
            </summary>
        </member>
        <member name="M:Piranha.Extend.BlockItemTypeAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Piranha.Extend.BlockItemTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates and initializes the item type.
            </summary>
            <param name="type">The specified item type</param>
        </member>
        <member name="T:Piranha.Extend.Blocks.AudioBlock">
            <summary>
            Audio block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.AudioBlock.Body">
            <summary>
            Gets/sets the Audio body.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.ColumnBlock">
            <summary>
            Single column quote block.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.ColumnBlock.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.ContentBlock">
            <summary>
            Block for referencing a content model.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.ContentBlock.Body">
            <summary>
            Gets/sets the page link.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.ContentBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="T:Piranha.Extend.Blocks.HtmlBlock">
            <summary>
            Single column HTML block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.HtmlBlock.Body">
            <summary>
            Gets/sets the HTML body.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.HtmlBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="M:Piranha.Extend.Blocks.HtmlBlock.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.HtmlColumnBlock">
            <summary>
            Two column HTML block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.HtmlColumnBlock.Column1">
            <summary>
            Gets/sets the first column.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.HtmlColumnBlock.Column2">
            <summary>
            Gets/sets the second column.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.HtmlColumnBlock.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.ImageAspect">
            <summary>
            The different image aspects available
            </summary>
        </member>
        <member name="F:Piranha.Extend.Blocks.ImageAspect.Original">
            <summary>
            Keeps the original image aspect
            </summary>
        </member>
        <member name="F:Piranha.Extend.Blocks.ImageAspect.Landscape">
            <summary>
            Crops the image to landscape (3x2)
            </summary>
        </member>
        <member name="F:Piranha.Extend.Blocks.ImageAspect.Portrait">
            <summary>
            Crops the image to portrait (2x3)
            </summary>
        </member>
        <member name="F:Piranha.Extend.Blocks.ImageAspect.Widescreen">
            <summary>
            Crops the image to widescreen (16x9)
            </summary>
        </member>
        <member name="F:Piranha.Extend.Blocks.ImageAspect.Square">
            <summary>
            Crops the image to square (1x1)
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.ImageBlock">
            <summary>
            Image block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.ImageBlock.Body">
            <summary>
            Gets/sets the image body.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.ImageBlock.Aspect">
            <summary>
            Gets/sets the selected image aspect.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.ImageBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="T:Piranha.Extend.Blocks.ImageGalleryBlock">
            <summary>
            Image block.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.PageBlock">
            <summary>
            Block for referencing a page.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.PageBlock.Body">
            <summary>
            Gets/sets the page link.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.PageBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="T:Piranha.Extend.Blocks.PostBlock">
            <summary>
            Block for referencing a post.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.PostBlock.Body">
            <summary>
            Gets/sets the post link.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.PostBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="T:Piranha.Extend.Blocks.QuoteBlock">
            <summary>
            Single column quote block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.QuoteBlock.Author">
            <summary>
            Gets/sets the author
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.QuoteBlock.Body">
            <summary>
            Gets/sets the text body.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.QuoteBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="M:Piranha.Extend.Blocks.QuoteBlock.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.SeparatorBlock">
            <summary>
            Separator
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.TextBlock">
            <summary>
            Single column text block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.TextBlock.Body">
            <summary>
            Gets/sets the text body.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Blocks.TextBlock.GetTitle">
            <summary>
            Gets the title of the block when used in a block group.
            </summary>
            <returns>The title</returns>
        </member>
        <member name="M:Piranha.Extend.Blocks.TextBlock.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Blocks.VideoBlock">
            <summary>
            Video block.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Blocks.VideoBlock.Body">
            <summary>
            Gets/sets the video body.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.Name">
            <summary>
            Gets/sets the display name.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.Category">
            <summary>
            Gets/sets the block category.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.Icon">
            <summary>
            Gets/set the icon css.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.Width">
            <summary>
            Gets/sets the editor width. The default value is "Centered".
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.ListTitle">
            <summary>
            Gets/sets the field that will be used to generate the list
            item title if the block is used in a block group. Please note
            that this value is only used for generic blocks as custom blocks
            are responsible for emitting their title changes.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.IsUnlisted">
            <summary>
            Gets/sets if the block type should only be listed
            where specified explicitly.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.IsGeneric">
            <summary>
            Gets/sets if the block should use a generic model
            when rendered in the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Extend.BlockTypeAttribute.Component">
            <summary>
            Gets/sets the name of the component that should be
            used to render the block in the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Extend.ContentGroupAttribute.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Extend.ContentGroupAttribute.Title">
            <summary>
            Gets/sets the title.
            </summary>
        </member>
        <member name="P:Piranha.Extend.ContentGroupAttribute.Icon">
            <summary>
            Gets/set the icon css.
            </summary>
        </member>
        <member name="T:Piranha.Extend.DefaultMarkdown">
            <summary>
            Interface for converting markdown to Html.
            </summary>
        </member>
        <member name="P:Piranha.Extend.DefaultMarkdown._pipeline">
            <summary>
            Gets/sets the additional pipeline to use
            for markdown transformation.
            </summary>
        </member>
        <member name="M:Piranha.Extend.DefaultMarkdown.Transform(System.String)">
            <summary>
            Transforms the given markdown string to html.
            </summary>
            <param name="md">The markdown</param>
            <returns>The transformed html</returns>
        </member>
        <member name="T:Piranha.Extend.Field">
            <summary>
            Base class for fields.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Field.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="T:Piranha.Extend.FieldAttribute">
            <summary>
            Attribute for marking a property as a field.
            </summary>
        </member>
        <member name="P:Piranha.Extend.FieldAttribute.Title">
            <summary>
            Gets/sets the optional title.
            </summary>
        </member>
        <member name="P:Piranha.Extend.FieldAttribute.Options">
            <summary>
            Gets/sets the field options.
            </summary>
        </member>
        <member name="P:Piranha.Extend.FieldAttribute.Placeholder">
            <summary>
            Gets/sets the optional placeholder for
            text based fields.
            </summary>
        </member>
        <member name="T:Piranha.Extend.FieldDescriptionAttribute">
            <summary>
            Attribute for adding a description to a field.
            </summary>
        </member>
        <member name="P:Piranha.Extend.FieldDescriptionAttribute.Text">
            <summary>
            Gets/sets the optional description text.
            </summary>
        </member>
        <member name="M:Piranha.Extend.FieldDescriptionAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Piranha.Extend.FieldDescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new description attribute and
            sets the description text.
            </summary>
            <param name="text">The description text</param>
        </member>
        <member name="T:Piranha.Extend.FieldSettingsAttribute">
            <summary>
            Base class for field settings.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.AudioField.op_Implicit(System.Guid)~Piranha.Extend.Fields.AudioField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.AudioField.op_Implicit(Piranha.Models.Media)~Piranha.Extend.Fields.AudioField">
            <summary>
            Implicit operator for converting a media object to a field.
            </summary>
            <param name="media">The media object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.AudioField.op_Implicit(Piranha.Extend.Fields.AudioField)~System.String">
            <summary>
            Impicit operator for converting the field to an url string.
            </summary>
            <param name="audio">The Audio field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.CheckBoxField.op_Implicit(System.Boolean)~Piranha.Extend.Fields.CheckBoxField">
            <summary>
            Implicit operator for converting a bool to a field.
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.CheckBoxField.op_Implicit(Piranha.Extend.Fields.CheckBoxField)~System.Boolean">
            <summary>
            Implicitly converts the CheckBox field to a bool.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ColorField.op_Implicit(System.String)~Piranha.Extend.Fields.ColorField">
            <summary>
            Implicit operator for converting a string to a field.
            </summary>
            <param name="str">The color value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ColorField.op_Implicit(Piranha.Extend.Fields.ColorField)~System.String">
            <summary>
            Implicitly converts the color field to a string.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="P:Piranha.Extend.Fields.ContentField.Id">
            <summary>
            Gets/sets the content id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Piranha.Extend.Fields.ContentField.Content">
            <summary>
            Gets/sets the related content object.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.ContentField.HasValue">
            <summary>
            Gets if the field has a content object available.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.Init(Piranha.IApi)">
            <summary>
            Initializes the field for client use.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.op_Implicit(System.Guid)~Piranha.Extend.Fields.ContentField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.op_Implicit(Piranha.Models.GenericContent)~Piranha.Extend.Fields.ContentField">
            <summary>
            Implicit operator for converting a content object to a field.
            </summary>
            <param name="content">The content object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.GetHashCode">
            <summary>
            Gets the hash code for the field.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to the field.
            </summary>
            <param name="obj">The object</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.Equals(Piranha.Extend.Fields.ContentField)">
            <summary>
            Checks if the given field is equal to the field.
            </summary>
            <param name="obj">The field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.op_Equality(Piranha.Extend.Fields.ContentField,Piranha.Extend.Fields.ContentField)">
            <summary>
            Checks if the fields are equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.ContentField.op_Inequality(Piranha.Extend.Fields.ContentField,Piranha.Extend.Fields.ContentField)">
            <summary>
            Checks if the fields are not equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="T:Piranha.Extend.Fields.DataSelectField`1">
            <summary>
            Generic select field.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.DataSelectField`1.Value">
            <summary>
            Gets the currently selected value.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.DataSelectFieldBase.Id">
            <summary>
            Gets/sets the id of the currently selected value.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.DataSelectFieldBase.Items">
            <summary>
            Gets/sets the available items to selected from, this is
            only used in the manager.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.DataSelectFieldBase.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.DocumentField.op_Implicit(System.Guid)~Piranha.Extend.Fields.DocumentField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.DocumentField.op_Implicit(Piranha.Models.Media)~Piranha.Extend.Fields.DocumentField">
            <summary>
            Implicit operator for converting a media object to a field.
            </summary>
            <param name="media">The media object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.DocumentField.op_Implicit(Piranha.Extend.Fields.DocumentField)~System.String">
            <summary>
            Impicit operator for converting the field to an url string.
            </summary>
            <param name="image">The document field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.HtmlField.op_Implicit(System.String)~Piranha.Extend.Fields.HtmlField">
            <summary>
            Implicit operator for converting a string to a field.
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.HtmlField.op_Implicit(Piranha.Extend.Fields.HtmlField)~System.String">
            <summary>
            Implicitly converts the Html field to a string.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.HtmlField.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.HtmlField.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.ImageField.op_Implicit(System.Guid)~Piranha.Extend.Fields.ImageField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ImageField.op_Implicit(Piranha.Models.Media)~Piranha.Extend.Fields.ImageField">
            <summary>
            Implicit operator for converting a media object to a field.
            </summary>
            <param name="media">The media object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ImageField.op_Implicit(Piranha.Extend.Fields.ImageField)~System.String">
            <summary>
            Impicit operator for converting the field to an url string.
            </summary>
            <param name="image">The image field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ImageField.Resize(Piranha.IApi,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the url for a resized version of the image.
            </summary>
            <param name="api">The api</param>
            <param name="width">The requested width</param>
            <param name="height">The optional height</param>
            <returns>The image url</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.MarkdownField.op_Implicit(System.String)~Piranha.Extend.Fields.MarkdownField">
            <summary>
            Implicit operator for converting a string to a field.
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.MarkdownField.op_Implicit(Piranha.Extend.Fields.MarkdownField)~System.String">
            <summary>
            Implicitly converts the markdown field to a HTML string.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.MarkdownField.ToHtml">
            <summary>
            Transforms the markdown field to HTML.
            </summary>
            <returns>The HTML string</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.MarkdownField.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaField.op_Implicit(System.Guid)~Piranha.Extend.Fields.MediaField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaField.op_Implicit(Piranha.Models.Media)~Piranha.Extend.Fields.MediaField">
            <summary>
            Implicit operator for converting a media object to a field.
            </summary>
            <param name="media">The media object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaField.op_Implicit(Piranha.Extend.Fields.MediaField)~System.String">
            <summary>
            Impicit operator for converting the field to an url string.
            </summary>
            <param name="image">The media field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.MediaFieldBase`1.Id">
            <summary>
            Gets/sets the media id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Piranha.Extend.Fields.MediaFieldBase`1.Media">
            <summary>
            Gets/sets the related media object.
            </summary>
            [JsonIgnore]
        </member>
        <member name="P:Piranha.Extend.Fields.MediaFieldBase`1.HasValue">
            <summary>
            Gets if the field has a media object available.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.Init(Piranha.IApi)">
            <summary>
            Initializes the field for client use.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.GetHashCode">
            <summary>
            Gets the hash code for the field.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to the field.
            </summary>
            <param name="obj">The object</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.Equals(`0)">
            <summary>
            Checks if the given field is equal to the field.
            </summary>
            <param name="obj">The field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.op_Equality(Piranha.Extend.Fields.MediaFieldBase{`0},Piranha.Extend.Fields.MediaFieldBase{`0})">
            <summary>
            Checks if the fields are equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.MediaFieldBase`1.op_Inequality(Piranha.Extend.Fields.MediaFieldBase{`0},Piranha.Extend.Fields.MediaFieldBase{`0})">
            <summary>
            Checks if the fields are not equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.NumberField.op_Implicit(System.Int32)~Piranha.Extend.Fields.NumberField">
            <summary>
            Implicit operator for converting a int to a field.
            </summary>
            <param name="number">The integer value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.NumberField.op_Implicit(Piranha.Extend.Fields.NumberField)~System.Nullable{System.Int32}">
            <summary>
            Implicitly converts the Number field to a int.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="P:Piranha.Extend.Fields.PageField.Id">
            <summary>
            Gets/sets the page id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Piranha.Extend.Fields.PageField.Page">
            <summary>
            Gets/sets the related page object.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.PageField.HasValue">
            <summary>
            Gets if the field has a page object available.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.Init(Piranha.IApi)">
            <summary>
            Initializes the field for client use.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.GetPageAsync``1(Piranha.IApi)">
            <summary>
            Gets the referenced page.
            </summary>
            <param name="api">The current api</param>
            <returns>The referenced page</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.op_Implicit(System.Guid)~Piranha.Extend.Fields.PageField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.op_Implicit(Piranha.Models.PageBase)~Piranha.Extend.Fields.PageField">
            <summary>
            Implicit operator for converting a page object to a field.
            </summary>
            <param name="page">The page object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.GetHashCode">
            <summary>
            Gets the hash code for the field.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to the field.
            </summary>
            <param name="obj">The object</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.Equals(Piranha.Extend.Fields.PageField)">
            <summary>
            Checks if the given field is equal to the field.
            </summary>
            <param name="obj">The field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.op_Equality(Piranha.Extend.Fields.PageField,Piranha.Extend.Fields.PageField)">
            <summary>
            Checks if the fields are equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PageField.op_Inequality(Piranha.Extend.Fields.PageField,Piranha.Extend.Fields.PageField)">
            <summary>
            Checks if the fields are not equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="P:Piranha.Extend.Fields.PostField.Id">
            <summary>
            Gets/sets the media id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Piranha.Extend.Fields.PostField.Post">
            <summary>
            Gets/sets the related post object.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.PostField.HasValue">
            <summary>
            Gets if the field has a post object available.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.Init(Piranha.IApi)">
            <summary>
            Initializes the field for client use.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.GetPostAsync``1(Piranha.IApi)">
            <summary>
            Gets the referenced post.
            </summary>
            <param name="api">The current api</param>
            <returns>The referenced post</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.op_Implicit(System.Guid)~Piranha.Extend.Fields.PostField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.op_Implicit(Piranha.Models.PostBase)~Piranha.Extend.Fields.PostField">
            <summary>
            Implicit operator for converting a post object to a field.
            </summary>
            <param name="post">The post object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.GetHashCode">
            <summary>
            Gets the hash code for the field.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to the field.
            </summary>
            <param name="obj">The object</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.Equals(Piranha.Extend.Fields.PostField)">
            <summary>
            Checks if the given field is equal to the field.
            </summary>
            <param name="obj">The field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.op_Equality(Piranha.Extend.Fields.PostField,Piranha.Extend.Fields.PostField)">
            <summary>
            Checks if the fields are equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.PostField.op_Inequality(Piranha.Extend.Fields.PostField,Piranha.Extend.Fields.PostField)">
            <summary>
            Checks if the fields are not equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.ReadonlyField.op_Implicit(System.String)~Piranha.Extend.Fields.ReadonlyField">
            <summary>
            Implicit operator for converting a string to a field.
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.ReadonlyField.op_Implicit(Piranha.Extend.Fields.ReadonlyField)~System.String">
            <summary>
            Implicitly converts the readonly field to a string.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="T:Piranha.Extend.Fields.SelectField`1">
            <summary>
            Generic select field.
            </summary>
        </member>
        <member name="F:Piranha.Extend.Fields.SelectField`1._items">
            <summary>
            The static list of available items.
            </summary>
        </member>
        <member name="F:Piranha.Extend.Fields.SelectField`1.Mutex">
            <summary>
            Initialization mutex.
            </summary>
        </member>
        <member name="F:Piranha.Extend.Fields.SelectField`1.IsInitialized">
            <summary>
            The initialization state.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectField`1.Value">
            <summary>
            Gets/sets the selected value.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectField`1.EnumType">
            <summary>
            Gets the current enum type.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectField`1.EnumValue">
            <summary>
            Gets/sets the selected value as a string.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectField`1.Items">
            <summary>
            Gets the available items to choose from. Primarily used
            from the manager interface.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.Init(Piranha.IApi)">
            <summary>
            Initializes the field for client use.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.GetHashCode">
            <summary>
            Gets the hash code for the field.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to the field.
            </summary>
            <param name="obj">The object</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.Equals(Piranha.Extend.Fields.SelectField{`0})">
            <summary>
            Checks if the given field is equal to the field.
            </summary>
            <param name="obj">The field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.op_Equality(Piranha.Extend.Fields.SelectField{`0},Piranha.Extend.Fields.SelectField{`0})">
            <summary>
            Checks if the fields are equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.op_Inequality(Piranha.Extend.Fields.SelectField{`0},Piranha.Extend.Fields.SelectField{`0})">
            <summary>
            Checks if the fields are not equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.GetEnumTitle(System.Enum)">
            <summary>
            Gets the display title for the given enum. If the DisplayAttribute
            is present it's description is returned, otherwise the string
            representation of the enum.
            </summary>
            <param name="val">The enum value</param>
            <returns>The display title</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectField`1.InitMetaData">
            <summary>
            Initializes the meta data needed in the manager interface.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Fields.SelectFieldBase">
            <summary>
            Base class for all SelectFields.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectFieldBase.EnumType">
            <summary>
            Gets the type of the enum.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectFieldBase.EnumValue">
            <summary>
            Gets/sets the value of the current enum value.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectFieldBase.Items">
            <summary>
            Gets the available items to choose from. Primarily used
            from the manager interface.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectFieldBase.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SelectFieldBase.Init(Piranha.IApi)">
            <summary>
            Initializes the field for client use.
            </summary>
            <param name="api">The current api</param>
        </member>
        <member name="T:Piranha.Extend.Fields.SelectFieldItem">
            <summary>
            An available item to choose from for a SelectField.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectFieldItem.Title">
            <summary>
            Gets/sets the display title.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.SelectFieldItem.Value">
            <summary>
            Gets/sets the enum value.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Fields.Settings.ColorFieldSettingsAttribute">
            <summary>
            Base class for field settings.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.ColorFieldSettingsAttribute.DisallowInput">
            <summary>
            Gets/sets if disallowing manual input.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.ColorFieldSettingsAttribute.DefaultValue">
            <summary>
            Gets/sets the optional default value for field.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Fields.Settings.ContentFieldSettingsAttribute">
            <summary>
            Settings for content fields.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.ContentFieldSettingsAttribute.Group">
            <summary>
            Gets/sets the currently allowed group.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Fields.Settings.StringFieldSettingsAttribute">
            <summary>
            Settings for string fields.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.StringFieldSettingsAttribute.DefaultValue">
            <summary>
            Gets/sets the optional default value for field.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.StringFieldSettingsAttribute.MaxLength">
            <summary>
            Gets/sets the optional max length of the field. A value
            of 0 means that the field has no max length.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Fields.Settings.TextFieldSettingsAttribute">
            <summary>
            Settings for text fields.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.TextFieldSettingsAttribute.DefaultValue">
            <summary>
            Gets/sets the optional default value for field.
            </summary>
        </member>
        <member name="P:Piranha.Extend.Fields.Settings.TextFieldSettingsAttribute.MaxLength">
            <summary>
            Gets/sets the optional max length of the field. A value
            of 0 means that the field has no max length.
            </summary>
        </member>
        <member name="T:Piranha.Extend.Fields.SimpleField`1">
            <summary>
            Base class for simple single type fields.
            </summary>
            <typeparam name="T">The field type</typeparam>
        </member>
        <member name="P:Piranha.Extend.Fields.SimpleField`1.Value">
            <summary>
            Gets/sets the field value.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SimpleField`1.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SimpleField`1.GetHashCode">
            <summary>
            Gets the hash code for the field.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.SimpleField`1.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to the field.
            </summary>
            <param name="obj">The object</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SimpleField`1.Equals(Piranha.Extend.Fields.SimpleField{`0})">
            <summary>
            Checks if the given field is equal to the field.
            </summary>
            <param name="obj">The field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SimpleField`1.op_Equality(Piranha.Extend.Fields.SimpleField{`0},Piranha.Extend.Fields.SimpleField{`0})">
            <summary>
            Checks if the fields are equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.SimpleField`1.op_Inequality(Piranha.Extend.Fields.SimpleField{`0},Piranha.Extend.Fields.SimpleField{`0})">
            <summary>
            Checks if the fields are not equal.
            </summary>
            <param name="field1">The first field</param>
            <param name="field2">The second field</param>
            <returns>True if the fields are equal</returns>
        </member>
        <member name="M:Piranha.Extend.Fields.StringField.op_Implicit(System.String)~Piranha.Extend.Fields.StringField">
            <summary>
            Implicit operator for converting a string to a field.
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.StringField.op_Implicit(Piranha.Extend.Fields.StringField)~System.String">
            <summary>
            Implicitly converts the String field to a string.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.StringField.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.TextField.op_Implicit(System.String)~Piranha.Extend.Fields.TextField">
            <summary>
            Implicit operator for converting a string to a field.
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.TextField.op_Implicit(Piranha.Extend.Fields.TextField)~System.String">
            <summary>
            Implicitly converts the Text field to a string.
            </summary>
            <param name="field">The field</param>
        </member>
        <member name="M:Piranha.Extend.Fields.TextField.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="M:Piranha.Extend.Fields.VideoField.op_Implicit(System.Guid)~Piranha.Extend.Fields.VideoField">
            <summary>
            Implicit operator for converting a Guid id to a field.
            </summary>
            <param name="guid">The guid value</param>
        </member>
        <member name="M:Piranha.Extend.Fields.VideoField.op_Implicit(Piranha.Models.Media)~Piranha.Extend.Fields.VideoField">
            <summary>
            Implicit operator for converting a media object to a field.
            </summary>
            <param name="media">The media object</param>
        </member>
        <member name="M:Piranha.Extend.Fields.VideoField.op_Implicit(Piranha.Extend.Fields.VideoField)~System.String">
            <summary>
            Impicit operator for converting the field to an url string.
            </summary>
            <param name="video">The video field</param>
        </member>
        <member name="P:Piranha.Extend.FieldTypeAttribute.Name">
            <summary>
            Gets/sets the display name.
            </summary>
        </member>
        <member name="P:Piranha.Extend.FieldTypeAttribute.Shorthand">
            <summary>
            Gets/sets the optional shorthand for type declaration.
            </summary>
        </member>
        <member name="P:Piranha.Extend.FieldTypeAttribute.Component">
            <summary>
            Gets/sets the name of the component that should be
            used to render the field in the manager interface.
            </summary>
        </member>
        <member name="T:Piranha.Extend.IField">
            <summary>
            Interface for fields.
            </summary>
        </member>
        <member name="M:Piranha.Extend.IField.GetTitle">
            <summary>
            Gets the list item title if this field is used in
            a collection regions.
            </summary>
        </member>
        <member name="T:Piranha.Extend.IMarkdown">
            <summary>
            Interface for converting markdown to Html.
            </summary>
        </member>
        <member name="M:Piranha.Extend.IMarkdown.Transform(System.String)">
            <summary>
            Transforms the given markdown string to html.
            </summary>
            <param name="md">The markdown</param>
            <returns>The transformed html</returns>
        </member>
        <member name="T:Piranha.Extend.IModule">
            <summary>
            Interface for defining a Piranha module.
            </summary>
        </member>
        <member name="P:Piranha.Extend.IModule.Author">
            <summary>
            Get the author for this module
            </summary>
        </member>
        <member name="P:Piranha.Extend.IModule.Name">
            <summary>
            Get the name of the module
            </summary>
        </member>
        <member name="P:Piranha.Extend.IModule.Version">
            <summary>
            Get the module version
            </summary>
        </member>
        <member name="P:Piranha.Extend.IModule.Description">
            <summary>
            Get the module description
            </summary>
        </member>
        <member name="P:Piranha.Extend.IModule.PackageUrl">
            <summary>
            Get the package url for the module
            </summary>
        </member>
        <member name="P:Piranha.Extend.IModule.IconUrl">
            <summary>
            Gets the logo url for the module.
            </summary>
        </member>
        <member name="M:Piranha.Extend.IModule.Init">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="T:Piranha.Extend.ISearchable">
            <summary>
            Interface for marking a block or field as searchable.
            </summary>
        </member>
        <member name="M:Piranha.Extend.ISearchable.GetIndexedContent">
            <summary>
            Gets the content that should be indexed for searching.
            </summary>
        </member>
        <member name="T:Piranha.Extend.ISerializer">
            <summary>
            Interface for creating a field serializer.
            </summary>
        </member>
        <member name="M:Piranha.Extend.ISerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.ISerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="T:Piranha.Extend.ITranslatable">
            <summary>
            Interface for marking a block or field as translatable.
            </summary>
        </member>
        <member name="T:Piranha.Extend.RegionAttribute">
            <summary>
            Attribute for marking a property as a region.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.Title">
            <summary>
            Gets/sets the optional title.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.ListTitle">
            <summary>
            Gets/sets the field that will be used to generate the list
            item title if the region is used in a collection.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.ListPlaceholder">
            <summary>
            Gets/sets the placeholder title that will be used for new
            list items if the region is used in a collection.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.ListExpand">
            <summary>
            Gets/sets if all lite items should be expanded in the UI.
            This works best for single field regions or smaller regions.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.SortOrder">
            <summary>
            Gets/sets the optional sort order.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.Icon">
            <summary>
            Gets/sets the optional icon css.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.Display">
            <summary>
            Gets/sets how the region should be displayed in
            the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionAttribute.Width">
            <summary>
            Gets/sets the editor width. The default value is "Centered".
            </summary>
        </member>
        <member name="T:Piranha.Extend.RegionDescriptionAttribute">
            <summary>
            Attribute for marking a property as a region.
            </summary>
        </member>
        <member name="P:Piranha.Extend.RegionDescriptionAttribute.Text">
            <summary>
            Gets/sets the optional description text.
            </summary>
        </member>
        <member name="M:Piranha.Extend.RegionDescriptionAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Piranha.Extend.RegionDescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new description attribute and
            sets the description text.
            </summary>
            <param name="text">The description text</param>
        </member>
        <member name="M:Piranha.Extend.Serializers.AudioFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.AudioFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.CheckBoxFieldSerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.CheckBoxFieldSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.ContentFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.ContentFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.DataSelectFieldSerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.DataSelectFieldSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.DateFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.DateFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.DocumentFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.DocumentFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.ImageFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.ImageFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.IntegerFieldSerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.IntegerFieldSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.MediaFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.MediaFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.PageFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.PageFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.PostFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.PostFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.SelectFieldSerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.SelectFieldSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.StringFieldSerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.StringFieldSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.VideoFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Piranha.Extend.Serializers.VideoFieldSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the given string.
            </summary>
            <param name="str">The serialized value</param>
            <returns>The object</returns>
        </member>
        <member name="T:Piranha.IApi">
            <summary>
            The main application api.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Aliases">
            <summary>
            Gets the alias service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Archives">
            <summary>
            Gets the archive service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Content">
            <summary>
            Gets the content service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.ContentGroups">
            <summary>
            Gets the content group service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.ContentTypes">
            <summary>
            Gets the content type service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Languages">
            <summary>
            Gets the language service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Media">
            <summary>
            Gets the media service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Pages">
            <summary>
            Gets the page repository.
            </summary>
        </member>
        <member name="P:Piranha.IApi.PageTypes">
            <summary>
            Gets the page type service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Params">
            <summary>
            Gets the param service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Posts">
            <summary>
            Gets the post service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.PostTypes">
            <summary>
            Gets the post type service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.Sites">
            <summary>
            Gets the site service.
            </summary>
        </member>
        <member name="P:Piranha.IApi.SiteTypes">
            <summary>
            Gets the site type service.
            </summary>
        </member>
        <member name="M:Piranha.ICache.Get``1(System.String)">
            <summary>
            Gets the model with the specified key from cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <returns>The cached model, null it wasn't found</returns>
        </member>
        <member name="M:Piranha.ICache.Set``1(System.String,``0)">
            <summary>
            Sets the given model in the cache.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="key">The unique key</param>
            <param name="value">The model</param>
        </member>
        <member name="M:Piranha.ICache.Remove(System.String)">
            <summary>
            Removes the model with the specified key from cache.
            </summary>
            <param name="key">The unique key</param>
        </member>
        <member name="T:Piranha.IImageProcessor">
            <summary>
            Interface for an image processor.
            </summary>
        </member>
        <member name="M:Piranha.IImageProcessor.GetSize(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets an image from the provided stream and returns its size.
            </summary>
            <param name="stream">The image data stream</param>
            <param name="width">The returned width</param>
            <param name="height">The returned height</param>
        </member>
        <member name="M:Piranha.IImageProcessor.GetSize(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Gets an image from the provided bytes and returns its size.
            </summary>
            <param name="bytes">The image data</param>
            <param name="width">The returned width</param>
            <param name="height">The returned height</param>
        </member>
        <member name="M:Piranha.IImageProcessor.Crop(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Gets an image from the provided stream, crops it according
            to the given size and writes out a new jpeg image on the
            destination stream.
            </summary>
            <param name="source">The image data stream</param>
            <param name="dest">The destination stream</param>
            <param name="width">The requested width</param>
            <param name="height">The requested height</param>
        </member>
        <member name="M:Piranha.IImageProcessor.Scale(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Gets an image from the provided stream, scales it according
            to the given width and writes out a new jpeg image on the
            destination stream.
            </summary>
            <param name="source">The image data stream</param>
            <param name="dest">The destination stream</param>
            <param name="width">The requested width</param>
        </member>
        <member name="M:Piranha.IImageProcessor.CropScale(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Gets an image from the provided stream, crops and scales it
            according to the given size and writes out a new jpeg image
            on the destination stream.
            </summary>
            <param name="source">The image data stream</param>
            <param name="dest">The destination stream</param>
            <param name="width">The requested width</param>
            <param name="height">The requested height</param>
        </member>
        <member name="M:Piranha.ISearch.SavePageAsync(Piranha.Models.PageBase)">
            <summary>
            Creates or updates the searchable content for the
            given page.
            </summary>
            <param name="page">The page</param>
        </member>
        <member name="M:Piranha.ISearch.DeletePageAsync(Piranha.Models.PageBase)">
            <summary>
            Deletes the given page from the search index.
            </summary>
            <param name="page">The page to delete</param>
        </member>
        <member name="M:Piranha.ISearch.SavePostAsync(Piranha.Models.PostBase)">
            <summary>
            Creates or updates the searchable content for the
            given post.
            </summary>
            <param name="post">The post</param>
        </member>
        <member name="M:Piranha.ISearch.DeletePostAsync(Piranha.Models.PostBase)">
            <summary>
            Deletes the given post from the search index.
            </summary>
            <param name="post">The post to delete</param>
        </member>
        <member name="M:Piranha.ISecurity.SignIn(System.Object,System.String,System.String)">
            <summary>
            Authenticates and signs in the user with the
            given credentials.
            </summary>
            <param name="context">The current application context</param>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>If the user was signed in</returns>
        </member>
        <member name="M:Piranha.ISecurity.SignOut(System.Object)">
            <summary>
            Signs out the current user.
            </summary>
            <param name="context">The current application context</param>
        </member>
        <member name="T:Piranha.IStorage">
            <summary>
            Interface for the main storage manager.
            </summary>
        </member>
        <member name="M:Piranha.IStorage.OpenAsync">
            <summary>
            Opens a new storage session.
            </summary>
            <returns>A new open session</returns>
        </member>
        <member name="M:Piranha.IStorage.GetPublicUrl(Piranha.Models.Media,System.String)">
            <summary>
            Gets the public URL for the given media object.
            </summary>
            <param name="media">The media file</param>
            <param name="filename">The file name</param>
            <returns>The public url</returns>
        </member>
        <member name="M:Piranha.IStorage.GetResourceName(Piranha.Models.Media,System.String)">
            <summary>
            Gets the resource name for the given media object.
            </summary>
            <param name="media">The media file</param>
            <param name="filename">The file name</param>
            <returns>The public url</returns>
        </member>
        <member name="T:Piranha.IStorageSession">
            <summary>
            Interface for a storage session.
            </summary>
        </member>
        <member name="M:Piranha.IStorageSession.GetAsync(Piranha.Models.Media,System.String,System.IO.Stream)">
            <summary>
            Writes the content for the specified media content to the given stream.
            </summary>
            <param name="media">The media file</param>
            <param name="filename">The file name</param>
            <param name="stream">The output stream</param>
            <returns>If the media was found</returns>
        </member>
        <member name="M:Piranha.IStorageSession.PutAsync(Piranha.Models.Media,System.String,System.String,System.IO.Stream)">
            <summary>
            Stores the given media content.
            </summary>
            <param name="media">The media file</param>
            <param name="filename">The file name</param>
            <param name="contentType">The content type</param>
            <param name="stream">The input stream</param>
            <returns>The public URL</returns>
        </member>
        <member name="M:Piranha.IStorageSession.PutAsync(Piranha.Models.Media,System.String,System.String,System.Byte[])">
            <summary>
            Stores the given media content.
            </summary>
            <param name="media">The media file</param>
            <param name="filename">The file name</param>
            <param name="contentType">The content type</param>
            <param name="bytes">The binary data</param>
            <returns>The public URL</returns>
        </member>
        <member name="M:Piranha.IStorageSession.DeleteAsync(Piranha.Models.Media,System.String)">
            <summary>
            Deletes the content for the specified media.
            </summary>
            <param name="media">The media file</param>
            <param name="filename">The file name</param>
        </member>
        <member name="P:Piranha.Models.Alias.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Alias.SiteId">
            <summary>
            Gets/sets the id of the site this alias is for.
            </summary>
        </member>
        <member name="P:Piranha.Models.Alias.AliasUrl">
            <summary>
            Gets/sets the alias url.
            </summary>
        </member>
        <member name="P:Piranha.Models.Alias.RedirectUrl">
            <summary>
            Gets/sets the url of the redirect.
            </summary>
        </member>
        <member name="P:Piranha.Models.Alias.Type">
            <summary>
            Gets/sets if this is a permanent or temporary
            redirect.
            </summary>
        </member>
        <member name="P:Piranha.Models.Alias.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.Alias.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="T:Piranha.Models.Comment">
            <summary>
            Abstract base class for comments.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.ContentId">
            <summary>
            Gets/sets the id of the content this comment
            is in response to.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.UserId">
            <summary>
            Gets/sets the optional user id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.Author">
            <summary>
            Gets/sets the author name.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.Email">
            <summary>
            Gets/sets the email address.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.Url">
            <summary>
            Gets/sets the optional website URL.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.IpAddress">
            <summary>
            Gets/sets the IP Address. This is not stored
            but can be used for comment validation.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.UserAgent">
            <summary>
            Gets/sets the User Agent. This is not stored but
            can be used for comment validation.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.IsApproved">
            <summary>
            Comments are approved by default unless you use some kind of comment
            validation mechanism.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.Body">
            <summary>
            Gets/sets the comment body.
            </summary>
        </member>
        <member name="P:Piranha.Models.Comment.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="T:Piranha.Models.Content`1">
            <summary>
            Base class for generic content.
            </summary>
            <typeparam name="T">The content type</typeparam>
        </member>
        <member name="M:Piranha.Models.Content`1.CreateAsync(Piranha.IApi,System.String)">
            <summary>
            Creates a new page model using the given page type id.
            </summary>
            <param name="api">The current api</param>
            <param name="typeId">The unique page type id</param>
            <returns>The new model</returns>
        </member>
        <member name="T:Piranha.Models.ContentBase">
            <summary>
            Abstract base class for templated content.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentBase.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentBase.TypeId">
            <summary>
            Gets/sets the content type id.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentBase.Title">
            <summary>
            Gets/sets the title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentBase.Permissions">
            <summary>
            Gets/sets the permissions needed to access the page.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentBase.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentBase.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="T:Piranha.Models.ContentGroup">
            <summary>
            Class for defining a content group.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentGroup.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentGroup.CLRType">
            <summary>
            Gets/sets the CLR type of the content model.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentGroup.Title">
            <summary>
            Gets/sets the display title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentGroup.Icon">
            <summary>
            Gets/set the icon css.
            </summary>
        </member>
        <member name="T:Piranha.Models.ContentInfo">
            <summary>
            Simple content class for querying large sets of
            data without loading regions.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentType.Group">
            <summary>
            Gets/sets the group name of the content type.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentType.UseCategory">
            <summary>
            Gets/sets if the content type should be
            categorized.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentType.UseExcerpt">
            <summary>
            Gets/sets if excerpt should be used for the
            content type. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentType.UsePrimaryImage">
            <summary>
            Gets/sets if primary image should be used for the
            content type. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentType.UseTags">
            <summary>
            Gets/sets if tags should be used for the content type.
            </summary>
        </member>
        <member name="M:Piranha.Models.ContentType.Ensure">
            <summary>
            Validates that the content type is correctly defined.
            </summary>
        </member>
        <member name="T:Piranha.Models.ContentTypeBase">
            <summary>
            Base class for templated content types.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeBase.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeBase.CLRType">
            <summary>
            Gets/sets the CLR type of the content model.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeBase.Title">
            <summary>
            Gets/sets the optional title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeBase.Regions">
            <summary>
            Gets/sets the available regions.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeBase.Routes">
            <summary>
            Gets/sets the optional routes.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeBase.CustomEditors">
            <summary>
            Gets/sets the optional custom editors.
            </summary>
        </member>
        <member name="T:Piranha.Models.ContentTypeEditor">
            <summary>
            Custom editor for a content type.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeEditor.Component">
            <summary>
            Gets/sets the editor component.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeEditor.Icon">
            <summary>
            Gets/sets the optional icon css.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeEditor.Title">
            <summary>
            Gets/sets the title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeField.Id">
            <summary>
            Gets/sets the id.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeField.Title">
            <summary>
            Gets/sets the optional title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeField.Type">
            <summary>
            Gets/sets the value type.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeField.Options">
            <summary>
            Gets/sets the options.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeField.Placeholder">
            <summary>
            Gets/sets the optional placeholder for
            text based fields.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeField.Description">
            <summary>
            Gets/sets the optional description to be shown in
            the manager interface.
            </summary>
        </member>
        <member name="F:Piranha.Models.ContentTypeField.Settings">
            <summary>
            Gets/sets the available field settings.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Id">
            <summary>
            Gets/sets the id.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Title">
            <summary>
            Gets/sets the optional title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Collection">
            <summary>
            Gets/sets if this region has a collection of values.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.ListTitleField">
            <summary>
            Gets/sets the field that should be used to render list item title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.ListTitlePlaceholder">
            <summary>
            Gets/sets the placeholder title that should be used for new items.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.ListExpand">
            <summary>
            Gets/sets if list items should be expandable. If not, the
            content is placed directly in the title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Description">
            <summary>
            Gets/sets the optional description to be shown in
            the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Icon">
            <summary>
            Gets/sets the optional icon css.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Display">
            <summary>
            Gets/sets how the region should be displayed in
            the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Width">
            <summary>
            Gets/sets the editor width.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRegion.Fields">
            <summary>
            Gets/sets the available fields.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRoute.Title">
            <summary>
            Gets/sets the display title.
            </summary>
        </member>
        <member name="P:Piranha.Models.ContentTypeRoute.Route">
            <summary>
            Gets/sets the internal route.
            </summary>
        </member>
        <member name="M:Piranha.Models.ContentTypeRoute.op_Implicit(Piranha.Models.ContentTypeRoute)~System.String">
            <summary>
            Implicit type conversion between a route and a string.
            </summary>
        </member>
        <member name="T:Piranha.Models.DynamicContent">
            <summary>
            Dynamic content model.
            </summary>
        </member>
        <member name="P:Piranha.Models.DynamicContent.Regions">
            <summary>
            Gets/sets the regions.
            </summary>
        </member>
        <member name="T:Piranha.Models.DynamicPage">
            <summary>
            Dynamic page model.
            </summary>
        </member>
        <member name="P:Piranha.Models.DynamicPage.Regions">
            <summary>
            Gets/sets the regions.
            </summary>
        </member>
        <member name="T:Piranha.Models.DynamicPost">
            <summary>
            Dynamic page model.
            </summary>
        </member>
        <member name="P:Piranha.Models.DynamicPost.Regions">
            <summary>
            Gets/sets the regions.
            </summary>
        </member>
        <member name="T:Piranha.Models.DynamicSiteContent">
            <summary>
            Dynamic page model.
            </summary>
        </member>
        <member name="P:Piranha.Models.DynamicSiteContent.Regions">
            <summary>
            Gets/sets the regions.
            </summary>
        </member>
        <member name="T:Piranha.Models.FieldOption">
            <summary>
            Options used to customize how the field is
            handled in the manager panel.
            </summary>
        </member>
        <member name="T:Piranha.Models.GenericContent">
            <summary>
            Base class for generic content.
            </summary>
        </member>
        <member name="P:Piranha.Models.GenericContent.PrimaryImage">
            <summary>
            Gets/sets the optional primary image.
            </summary>
        </member>
        <member name="P:Piranha.Models.GenericContent.Excerpt">
            <summary>
            Gets/sets the optional excerpt.
            </summary>
        </member>
        <member name="T:Piranha.Models.GenericPage`1">
            <summary>
            Generic page model.
            </summary>
            <typeparam name="T">The model type</typeparam>
        </member>
        <member name="M:Piranha.Models.GenericPage`1.CreateAsync(Piranha.IApi,System.String)">
            <summary>
            Creates a new page model using the given page type id.
            </summary>
            <param name="api">The current api</param>
            <param name="typeId">The unique page type id</param>
            <returns>The new model</returns>
        </member>
        <member name="P:Piranha.Models.IBlockContent.Blocks">
            <summary>
            Gets/sets the blocks.
            </summary>
        </member>
        <member name="T:Piranha.Models.ICategorizedContent">
            <summary>
            Interface for content that should be categorized.
            </summary>
        </member>
        <member name="P:Piranha.Models.ICategorizedContent.Category">
            <summary>
            Gets/sets the optional category.
            </summary>
        </member>
        <member name="T:Piranha.Models.ICommentModel">
            <summary>
            Interface for a content object that supports comments.
            </summary>
        </member>
        <member name="P:Piranha.Models.ICommentModel.EnableComments">
            <summary>
            Gets/sets if comments should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="T:Piranha.Models.IContentInfo">
            <summary>
            Interface for a flat content object without
            regions or blocks.
            </summary>
        </member>
        <member name="P:Piranha.Models.IDynamicContent.Regions">
            <summary>
            Gets/sets the regions.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.Title">
            <summary>
            Gets/sets the title.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.MetaTitle">
            <summary>
            Gets/sets the optional meta title.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.MetaKeywords">
            <summary>
            Gets/sets the optional meta keywords.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.MetaDescription">
            <summary>
            Gets/sets the optional meta description.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.MetaIndex">
            <summary>
            Gets/sets the meta index.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.MetaFollow">
            <summary>
            Gets/sets the meta follow.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.MetaPriority">
            <summary>
            Gets/sets the meta priority.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.OgTitle">
            <summary>
            Gets/sets the optional open graph title.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.OgDescription">
            <summary>
            Gets/sets the optional open graph description.
            </summary>
        </member>
        <member name="P:Piranha.Models.IMeta.OgImage">
            <summary>
            Gets/sets the optional open graph image.
            </summary>
        </member>
        <member name="P:Piranha.Models.ITypeModel.Id">
            <summary>
            Gets/sets the unique model id.
            </summary>
        </member>
        <member name="T:Piranha.Models.IRegionList">
            <summary>
            Interface for accessing the meta data of a region list.
            </summary>
        </member>
        <member name="P:Piranha.Models.IRegionList.TypeId">
            <summary>
            Gets/sets the page type id.
            </summary>
        </member>
        <member name="P:Piranha.Models.IRegionList.RegionId">
            <summary>
            Gets/sets the region id.
            </summary>
        </member>
        <member name="P:Piranha.Models.IRegionList.Model">
            <summary>
            Gets/sets the parent model.
            </summary>
        </member>
        <member name="M:Piranha.Models.IRegionList.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:Piranha.Models.IRegionList.Add(System.Object)">
            <summary>
            Adds a new item to the region list
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="T:Piranha.Models.ITaggedContent">
            <summary>
            Interface for content that can be tagged.
            </summary>
        </member>
        <member name="P:Piranha.Models.ITaggedContent.Tags">
            <summary>
            Gets/sets the available tags.
            </summary>
        </member>
        <member name="P:Piranha.Models.Language.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Language.Title">
            <summary>
            Gets/sets the display title.
            </summary>
        </member>
        <member name="P:Piranha.Models.Language.Culture">
            <summary>
            Gets/sets the optional culture.
            </summary>
        </member>
        <member name="P:Piranha.Models.Language.IsDefault">
            <summary>
            Gets/sets if this is the default language.
            </summary>
        </member>
        <member name="P:Piranha.Models.Media.Properties">
            <summary>
            Gets/sets the user defined properties.
            </summary>
        </member>
        <member name="P:Piranha.Models.Media.Versions">
            <summary>
            Gets/sets the available versions.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.FolderId">
            <summary>
            Gets/sets the optional folder id.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Type">
            <summary>
            Gets/sets the media type.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Filename">
            <summary>
            Gets/sets the filename.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.ContentType">
            <summary>
            Gets/sets the content type.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Title">
            <summary>
            Gets/sets the optional title.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.AltText">
            <summary>
            Gets/sets the optional alt text.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Description">
            <summary>
            Gets/sets the optional description.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Size">
            <summary>
            Gets/sets the file size in bytes.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.PublicUrl">
            <summary>
            Gets/sets the public url.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Width">
            <summary>
            Gets/sets the optional width. This only applies
            if the media asset is an image.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Height">
            <summary>
            Gets/sets the optional height. This only applies
            if the media asset is an image.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaBase.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="T:Piranha.Models.MediaContent">
            <summary>
            Abstract class for media content.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaContent.Id">
            <summary>
            Gets/sets the optional id. If this is empty a new media
            entry is created, otherwise the specified media
            is updated.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaContent.FolderId">
            <summary>
            Gets/sets the optional folder id this media should be placed in.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaContent.Filename">
            <summary>
            Gets/sets the filename.
            </summary>
        </member>
        <member name="T:Piranha.Models.BinaryMediaContent">
            <summary>
            Binary media content.
            </summary>
        </member>
        <member name="P:Piranha.Models.BinaryMediaContent.Data">
            <summary>
            Gets/sets the byte data of the media.
            </summary>
        </member>
        <member name="T:Piranha.Models.StreamMediaContent">
            <summary>
            Stream media content.
            </summary>
        </member>
        <member name="P:Piranha.Models.StreamMediaContent.Data">
            <summary>
            Gets/sets the stream the contains the media content.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolder.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolder.ParentId">
            <summary>
            Gets/sets the optional parent id.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolder.Name">
            <summary>
            Gets/sets the folder name.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolder.Description">
            <summary>
            Gets/sets the optional description.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolder.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolderSimple.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaFolderSimple.Name">
            <summary>
            Gets/sets the folder name.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaStructure.MediaCount">
            <summary>
            Gets/sets the number of media items in the root folder.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaStructure.TotalCount">
            <summary>
            Gets/sets the total amount of media items in structure.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaStructureItem.Name">
            <summary>
            Gets/sets the folder name.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaStructureItem.FolderCount">
            <summary>
            Gets/sets the number of child folders in the folder.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaStructureItem.MediaCount">
            <summary>
            Gets/sets the number of media items in the folder.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaStructureItem.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="M:Piranha.Models.MediaStructureItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaVersion.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaVersion.Size">
            <summary>
            Gets/sets the file size in bytes.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaVersion.Width">
            <summary>
            Gets/sets the width.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaVersion.Height">
            <summary>
            Gets/sets the optional height.
            </summary>
        </member>
        <member name="P:Piranha.Models.MediaVersion.FileExtension">
            <summary>
            Gets/sets the file extension of the generated version.
            </summary>
        </member>
        <member name="T:Piranha.Models.Page`1">
            <summary>
            Base class for basic content pages.
            </summary>
        </member>
        <member name="T:Piranha.Models.PageBase">
            <summary>
            Base class for page models.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.SiteId">
            <summary>
            Gets/sets the site id.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.ParentId">
            <summary>
            Gets/sets the optional parent id.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.SortOrder">
            <summary>
            Gets/sets the sort order of the page in its hierarchical position.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.NavigationTitle">
            <summary>
            Gets/sets the navigation title.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.IsHidden">
            <summary>
            Gets/sets if the page is hidden in the navigation.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.OriginalPageId">
            <summary>
            Gets/sets the id of the page this page is a copy of
            </summary>
        </member>
        <member name="P:Piranha.Models.PageBase.IsStartPage">
            <summary>
            Gets if this is the startpage of the site.
            </summary>
        </member>
        <member name="T:Piranha.Models.PageComment">
            <summary>
            A comment related to a page.
            </summary>
        </member>
        <member name="T:Piranha.Models.PageInfo">
            <summary>
            Simple post class for querying large sets of
            data without loading regions or blocks.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageType.UseBlocks">
            <summary>
            Gets/sets if the page type should use the block editor
            for its main content. The default value is True.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageType.UsePrimaryImage">
            <summary>
            Gets/sets if primary image should be used for the
            post type. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageType.UseExcerpt">
            <summary>
            Gets/sets if excerpt should be used for the
            post type. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageType.IsArchive">
            <summary>
            Gets/sets if this is an archive page or not.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageType.ArchiveItemTypes">
            <summary>
            Gets/sets the allowed items types if this is an Archive
            Page. If the collection is empty all Post Types should
            be considered to be allowed.
            </summary>
        </member>
        <member name="P:Piranha.Models.PageType.BlockItemTypes">
            <summary>
            Gets/sets the allowed block types. An empty collection means
            that all types are allowed.
            </summary>
        </member>
        <member name="M:Piranha.Models.PageType.Ensure">
            <summary>
            Validates that the page type is correctly defined.
            </summary>
        </member>
        <member name="T:Piranha.Models.Param">
            <summary>
            String parameter.
            </summary>
        </member>
        <member name="P:Piranha.Models.Param.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Param.Key">
            <summary>
            Gets/sets the unique key.
            </summary>
        </member>
        <member name="P:Piranha.Models.Param.Value">
            <summary>
            Gets/sets the value.
            </summary>
        </member>
        <member name="P:Piranha.Models.Param.Description">
            <summary>
            Gets/sets the optional description.
            </summary>
        </member>
        <member name="P:Piranha.Models.Param.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.Param.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="T:Piranha.Models.Post`1">
            <summary>
            Generic post model.
            </summary>
            <typeparam name="T">The model type</typeparam>
        </member>
        <member name="M:Piranha.Models.Post`1.CreateAsync(Piranha.IApi,System.String)">
            <summary>
            Creates a new post model using the given post type id.
            </summary>
            <param name="api">The current api</param>
            <param name="typeId">The unique post type id</param>
            <returns>The new model</returns>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.Year">
            <summary>
            Gets/sets the optionally requested year.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.Month">
            <summary>
            Gets/sets the optionally requested month.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.CurrentPage">
            <summary>
            Gets/sets the current page.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.TotalPages">
            <summary>
            Gets/sets the total number of pages available.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.TotalPosts">
            <summary>
            Gets/sets the total number of posts available.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.Category">
            <summary>
            Gets/sets the optionally selected category.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.Tag">
            <summary>
            Gets/sets the optionally selected tag.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostArchive`1.Posts">
            <summary>
            Gets/sets the available posts.
            </summary>
        </member>
        <member name="T:Piranha.Models.PostBase">
            <summary>
            Base class for post models.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostBase.BlogId">
            <summary>
            Gets/sets the blog page id.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostBase.Category">
            <summary>
            Gets/sets the category.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostBase.Tags">
            <summary>
            Gets/sets the available tags.
            </summary>
        </member>
        <member name="T:Piranha.Models.PostComment">
            <summary>
            A comment related to a post.
            </summary>
        </member>
        <member name="T:Piranha.Models.PostInfo">
            <summary>
            Simple post class for querying large sets of
            data without loading regions or blocks.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostType.UseBlocks">
            <summary>
            Gets/sets if the post type should use the block editor
            for its main content. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostType.UsePrimaryImage">
            <summary>
            Gets/sets if primary image should be used for the
            post type. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostType.UseExcerpt">
            <summary>
            Gets/sets if excerpt should be used for the
            post type. The default value is true.
            </summary>
        </member>
        <member name="P:Piranha.Models.PostType.BlockItemTypes">
            <summary>
            Gets/sets the allowed block types. An empty collection means
            that all types are allowed.
            </summary>
        </member>
        <member name="M:Piranha.Models.PostType.Ensure">
            <summary>
            Validates that the post type is correctly defined.
            </summary>
        </member>
        <member name="T:Piranha.Models.RegionList`1">
            <summary>
            Region list for dynamic models.
            </summary>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="P:Piranha.Models.RegionList`1.TypeId">
            <summary>
            Gets/sets the page type id.
            </summary>
        </member>
        <member name="P:Piranha.Models.RegionList`1.RegionId">
            <summary>
            Gets/sets the region id.
            </summary>
        </member>
        <member name="P:Piranha.Models.RegionList`1.Model">
            <summary>
            Gets/sets the parent model.
            </summary>
        </member>
        <member name="M:Piranha.Models.RegionList`1.Add(System.Object)">
            <summary>
            Adds a new item to the region list
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="T:Piranha.Models.RoutedContentBase">
            <summary>
            Abstract base class for templated content with a route.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.Slug">
            <summary>
            Gets/sets the unique slug.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.Permalink">
            <summary>
            Gets/sets the public permalink.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.MetaTitle">
            <summary>
            Gets/sets the optional meta title.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.MetaKeywords">
            <summary>
            Gets/sets the optional meta keywords.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.MetaDescription">
            <summary>
            Gets/sets the optional meta description.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.MetaIndex">
            <summary>
            Gets/sets the meta index.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.MetaFollow">
            <summary>
            Gets/sets the meta follow.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.MetaPriority">
            <summary>
            Gets/sets the meta priority.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.OgTitle">
            <summary>
            Gets/sets the optional open graph title.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.OgDescription">
            <summary>
            Gets/sets the optional open graph description.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.OgImage">
            <summary>
            Gets/sets the optional open graph image.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.PrimaryImage">
            <summary>
            Gets/sets the optional primary image.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.Excerpt">
            <summary>
            Gets/sets the optional excerpt.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.Route">
            <summary>
            Gets/sets the optional route used by the middleware.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.RedirectUrl">
            <summary>
            Gets/sets the optional redirect.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.RedirectType">
            <summary>
            Gets/sets the redirect type.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.Blocks">
            <summary>
            Gets/sets the available blocks.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.EnableComments">
            <summary>
            Gets/sets if comments should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.CloseCommentsAfterDays">
            <summary>
            Gets/sets after how many days after publish date comments
            should be closed. A value of 0 means never.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.CommentCount">
            <summary>
            Gets/sets the comment count.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.IsCommentsOpen">
            <summary>
            Checks if comments are open for this page.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.Published">
            <summary>
            Gets/sets the published date.
            </summary>
        </member>
        <member name="P:Piranha.Models.RoutedContentBase.IsPublished">
            <summary>
            Checks of the current content is published.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.LanguageId">
            <summary>
            Gets/sets the language id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.SiteTypeId">
            <summary>
            Gets/sets the optional site type id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Title">
            <summary>
            Gets/sets the main title.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.InternalId">
            <summary>
            Gets/sets the internal textual id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Description">
            <summary>
            Gets/sets the optional description.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Logo">
            <summary>
            Gets/sets the optional site logo.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Hostnames">
            <summary>
            Gets/sets the optional hostnames to bind this site for.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.IsDefault">
            <summary>
            Gets/sets if this is the default site.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Culture">
            <summary>
            Gets/sets the optional culture for the site.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.ContentLastModified">
            <summary>
            Gets/sets the global last modification date
            of the site's content.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.Site.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="T:Piranha.Models.SiteContent`1">
            <summary>
            Generic post model.
            </summary>
            <typeparam name="T">The model type</typeparam>
        </member>
        <member name="M:Piranha.Models.SiteContent`1.CreateAsync(Piranha.IApi,System.String)">
            <summary>
            Creates a new site content model using the given site type id.
            </summary>
            <param name="api">The current api</param>
            <param name="typeId">The unique site type id</param>
            <returns>The new model</returns>
        </member>
        <member name="T:Piranha.Models.SiteContentBase">
            <summary>
            Base class for site content models.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.OriginalPageId">
            <summary>
            Gets/sets the optional original id.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.ParentId">
            <summary>
            Gets/sets the optional parent id.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.SortOrder">
            <summary>
            Gets/sets the sort order.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.Title">
            <summary>
            Gets/sets the main title.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.NavigationTitle">
            <summary>
            Gets/sets the optional navigation title.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.MetaIndex">
            <summary>
            Gets/sets the meta index.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.MetaPriority">
            <summary>
            Gets/sets the meta priority.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.MenuTitle">
            <summary>
            Gets the menu title for the item. The menu title returns
            the navigation title if set, otherwise the main title.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.PageTypeName">
            <summary>
            Gets/sets the name of the page type.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.Permalink">
            <summary>
            Gets/sets the unique permalink.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.IsHidden">
            <summary>
            Gets/sets if the item is hidden.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Piranha.Models.SitemapItem.Published">
            <summary>
            Gets/sets the published date.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.Created">
            <summary>
            Gets/sets the created date.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="P:Piranha.Models.SitemapItem.Permissions">
            <summary>
            Gets/sets the permissions needed to access the page.
            </summary>
        </member>
        <member name="M:Piranha.Models.SitemapItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Piranha.Models.SitemapItem.HasChild(System.Guid)">
            <summary>
            Checks if the current sitemap item has a
            child item with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>If the child was found</returns>
        </member>
        <member name="M:Piranha.Models.SiteType.Ensure">
            <summary>
            Validates that the site type is correctly defined.
            </summary>
        </member>
        <member name="T:Piranha.Models.Structure`2">
            <summary>
            Abstract class for building a hierarchical structure.
            </summary>
        </member>
        <member name="M:Piranha.Models.Structure`2.GetPartial(System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Gets the partial structure with the items positioned
            below the item with the given id.
            </summary>
            <param name="id">The unique id</param>
            <param name="includeRootNode">If the root node should be included</param>
            <returns>The partial structure</returns>
        </member>
        <member name="M:Piranha.Models.Structure`2.GetBreadcrumb(System.Nullable{System.Guid})">
            <summary>
            Gets the breadcrumb for the item with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The breadcrumb</returns>
        </member>
        <member name="M:Piranha.Models.Structure`2.GetPartialRecursive(System.Collections.Generic.IList{`1},System.Guid,System.Boolean)">
            <summary>
            Gets the partial structure by going through the
            items recursively.
            </summary>
            <param name="items">The items</param>
            <param name="id">The unique id</param>
            <param name="includeRootNode">If the root node should be included</param>
            <returns>The partial structure if found</returns>
        </member>
        <member name="M:Piranha.Models.Structure`2.GetBreadcrumbRecursive(System.Collections.Generic.IList{`1},System.Guid)">
            <summary>
            Gets the breadcrumb items by going through the
            items recursively.
            </summary>
            <param name="items">The items</param>
            <param name="id">The unique id</param>
            <returns>The breadcrumb items</returns>
        </member>
        <member name="T:Piranha.Models.StructureItem`2">
            <summary>
            Abstract class for an hierarchical item in a structure.
            </summary>
        </member>
        <member name="P:Piranha.Models.StructureItem`2.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.StructureItem`2.Level">
            <summary>
            Gets/sets the level in the hierarchy.
            </summary>
        </member>
        <member name="P:Piranha.Models.StructureItem`2.Items">
            <summary>
            Gets/sets the child items.
            </summary>
        </member>
        <member name="P:Piranha.Models.Taxonomy.Id">
            <summary>
            Gets/sets the unique id.
            </summary>
        </member>
        <member name="P:Piranha.Models.Taxonomy.Title">
            <summary>
            Gets/sets the title.
            </summary>
        </member>
        <member name="P:Piranha.Models.Taxonomy.Slug">
            <summary>
            Gets/sets the slug.
            </summary>
        </member>
        <member name="P:Piranha.Models.Taxonomy.Type">
            <summary>
            Gets/sets the type.
            </summary>
        </member>
        <member name="M:Piranha.Models.Taxonomy.op_Implicit(System.String)~Piranha.Models.Taxonomy">
            <summary>
            Operator for type casting a string to a taxonomy.
            </summary>
            <param name="str">The string</param>
        </member>
        <member name="T:Piranha.Models.TaxonomyType">
            <summary>
            The different types of taxonomies available.
            </summary>
        </member>
        <member name="F:Piranha.Models.TaxonomyType.NotSet">
            <summary>
            The type has not been specified.
            </summary>
        </member>
        <member name="F:Piranha.Models.TaxonomyType.Category">
            <summary>
            The taxonomy is a category.
            </summary>
        </member>
        <member name="F:Piranha.Models.TaxonomyType.Tag">
            <summary>
            The taxonomy is a tag.
            </summary>
        </member>
        <member name="T:Piranha.NoCoverageAttribute">
            <summary>
            Simple attribute to exclude classes or methods from code
            coverage.
            </summary>
        </member>
        <member name="T:Piranha.PiranhaRouteConfig">
            <summary>
            Used to configure the different parts of the integrated middleware
            routing component.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.LoginUrl">
            <summary>
            Gets/sets the login url.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UseAliasRouting">
            <summary>
            Gets/sets if alias routing should be used.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UseArchiveRouting">
            <summary>
            Gets/sets if archive routing should be used.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UsePageRouting">
            <summary>
            Gets/sets if page routing should be used.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UsePostRouting">
            <summary>
            Gets/sets if post routing should be used.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UseSiteRouting">
            <summary>
            Gets/sets if site routing for multiple sites
            should be used.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UseSitemapRouting">
            <summary>
            Gets/sets if sitemap routing should be used.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaRouteConfig.UseStartpageRouting">
            <summary>
            Gets/sets if startpage routing for empty URL's
            should be used.
            </summary>
        </member>
        <member name="M:Piranha.PiranhaRouteConfig.DisableRouting">
            <summary>
            Disables all routing features of the application.
            </summary>
        </member>
        <member name="T:Piranha.PiranhaServiceBuilder">
            <summary>
            Service builder for simple application startup.
            </summary>
        </member>
        <member name="F:Piranha.PiranhaServiceBuilder.Services">
            <summary>
            The inner Service collection.
            </summary>
        </member>
        <member name="P:Piranha.PiranhaServiceBuilder.AddRazorRuntimeCompilation">
            <summary>
            Gets/sets if runtime compilation should be enabled.
            </summary>
        </member>
        <member name="M:Piranha.PiranhaServiceBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Default constructor.
            </summary>
            <param name="services">The current service collection</param>
        </member>
        <member name="M:Piranha.Repositories.IAliasRepository.GetAll(System.Guid)">
            <summary>
            Gets all available models.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IAliasRepository.GetById(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or NULL if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Repositories.IAliasRepository.GetByAliasUrl(System.String,System.Guid)">
            <summary>
            Gets the model with the given alias url.
            </summary>
            <param name="url">The unique url</param>
            <param name="siteId">The site id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.IAliasRepository.GetByRedirectUrl(System.String,System.Guid)">
            <summary>
            Gets the models with the given redirect url.
            </summary>
            <param name="url">The unique url</param>
            <param name="siteId">The site id</param>
            <returns>The models</returns>
        </member>
        <member name="M:Piranha.Repositories.IAliasRepository.Save(Piranha.Models.Alias)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IAliasRepository.Delete(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IArchiveRepository.GetPostCount(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the total post count for the specified archive
            and filter.
            </summary>
            <param name="archiveId">The archive id</param>
            <param name="categoryId">The optional category id</param>
            <param name="tagId">The optional tag id</param>
            <param name="year">The optional year</param>
            <param name="month">The optional month</param>
            <returns>The total post count</returns>
        </member>
        <member name="M:Piranha.Repositories.IArchiveRepository.GetPosts(System.Guid,System.Int32,System.Int32,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the id of the posts in the current archive
            matching the specified filter.
            </summary>
            <param name="archiveId">The archive id</param>
            <param name="pageSize">The page size</param>
            <param name="currentPage">The current page</param>
            <param name="categoryId">The optional category id</param>
            <param name="tagId">The optional tag id</param>
            <param name="year">The optional year</param>
            <param name="month">The optional month</param>
            <returns>The matching posts</returns>
        </member>
        <member name="M:Piranha.Repositories.IContentGroupRepository.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IContentGroupRepository.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Repositories.IContentGroupRepository.SaveAsync(Piranha.Models.ContentGroup)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IContentGroupRepository.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IContentRepository.GetAll(System.String)">
            <summary>
            Gets all of the available content for the optional
            group id.
            </summary>
            <param name="groupId">The optional group id</param>
            <returns>The available content</returns>
        </member>
        <member name="M:Piranha.Repositories.IContentRepository.GetById``1(System.Guid,System.Guid)">
            <summary>
            Gets the content model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <param name="languageId">The selected language id</param>
            <returns>The content model</returns>
        </member>
        <member name="M:Piranha.Repositories.IContentRepository.Save``1(``0,System.Guid)">
            <summary>
            Saves the given content model
            </summary>
            <param name="model">The content model</param>
            <param name="languageId">The selected language id</param>
        </member>
        <member name="M:Piranha.Repositories.IContentRepository.Delete(System.Guid)">
            <summary>
            Deletes the content model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IContentTypeRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IContentTypeRepository.GetByGroup(System.String)">
            <summary>
            Gets all available models from the specified group.
            </summary>
            <param name="group">The content group</param>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IContentTypeRepository.GetById(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Repositories.IContentTypeRepository.Save(Piranha.Models.ContentType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IContentTypeRepository.Delete(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.ILanguageRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.ILanguageRepository.GetById(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Repositories.ILanguageRepository.GetDefault">
            <summary>
            Gets the default side.
            </summary>
            <returns>The modell</returns>
        </member>
        <member name="M:Piranha.Repositories.ILanguageRepository.Save(Piranha.Models.Language)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.ILanguageRepository.Delete(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.GetAll(System.Nullable{System.Guid})">
            <summary>
            Gets all media available in the specified folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The available media</returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.CountAll(System.Nullable{System.Guid})">
            <summary>
            Count the amount of items in the given folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.GetAllFolders(System.Nullable{System.Guid})">
            <summary>
            Gets all media folders available in the specified
            folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The available media folders</returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.GetById(System.Guid[])">
            <summary>
            Get media for all Ids in this enumerable.
            </summary>
            <param name="ids">One or several media id</param>
            <returns>The matching media</returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.GetById(System.Guid)">
            <summary>
            Gets the media with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The media</returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.GetFolderById(System.Guid)">
            <summary>
            Gets the media folder with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The media folder</returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.GetStructure">
            <summary>
            Gets the hierachical media structure.
            </summary>
            <returns>The media structure</returns>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.Save(Piranha.Models.Media)">
            <summary>
            Adds or updates the given model in the database.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.SaveFolder(Piranha.Models.MediaFolder)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.Move(Piranha.Models.Media,System.Nullable{System.Guid})">
            <summary>
            Moves the media to the folder with the specified id.
            </summary>
            <param name="model">The media</param>
            <param name="folderId">The folder id</param>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.Delete(System.Guid)">
            <summary>
            Deletes the media with the given id. Please note that this method
            is not really synchronous, it's just a wrapper for the async version.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IMediaRepository.DeleteFolder(System.Guid)">
            <summary>
            Deletes the media folder with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetAll(System.Guid)">
            <summary>
            Gets all of the available pages for the current site.
            </summary>
            <param name="siteId">The site id</param>
            <returns>The pages</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetAllBlogs(System.Guid)">
            <summary>
            Gets the available blog pages for the current site.
            </summary>
            <param name="siteId">The site id</param>
            <returns>The pages</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetAllDrafts(System.Guid)">
            <summary>
            Gets the id of all pages that have a draft for
            the specified site.
            </summary>
            <param name="siteId">The unique site id</param>
            <returns>The pages that have a draft</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetAllComments(System.Nullable{System.Guid},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets the comments available for the page with the specified id. If no page id
            is provided all comments are fetched.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="page">The page number</param>
            <param name="pageSize">The page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetAllPendingComments(System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            Gets the pending comments available for the page with the specified id.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="page">The page number</param>
            <param name="pageSize">The page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetStartpage``1(System.Guid)">
            <summary>
            Gets the site startpage.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="siteId">The site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetById``1(System.Guid)">
            <summary>
            Gets the page model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetByIds``1(System.Guid[])">
            <summary>
            Gets the page models with the specified id's.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="ids">The unique id's</param>
            <returns>The page models</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetBySlug``1(System.String,System.Guid)">
            <summary>
            Gets the page model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="slug">The unique slug</param>
            <param name="siteId">The site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetDraftById``1(System.Guid)">
            <summary>
            Gets the draft for the page model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.Move``1(``0,System.Nullable{System.Guid},System.Int32)">
            <summary>
            Moves the current page in the structure.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The page to move</param>
            <param name="parentId">The new parent id</param>
            <param name="sortOrder">The new sort order</param>
            <returns>The other pages that were affected by the move</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.GetCommentById(System.Guid)">
            <summary>
            Gets the comment with the given id.
            </summary>
            <param name="id">The comment id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.Save``1(``0)">
            <summary>
            Saves the given page model
            </summary>
            <param name="model">The page model</param>
            <returns>The other pages that were affected by the move</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.SaveDraft``1(``0)">
            <summary>
            Saves the given model as a draft revision.
            </summary>
            <param name="model">The page model</param>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.SaveComment(System.Guid,Piranha.Models.Comment)">
            <summary>
            Saves the comment.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="model">The comment model</param>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.CreateRevision(System.Guid,System.Int32)">
            <summary>
            Creates a revision from the current version
            of the page with the given id.
            </summary>
            <param name="id">The unique id</param>
            <param name="revisions">The maximum number of revisions that should be stored</param>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.Delete(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The other pages that were affected by the move</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.DeleteDraft(System.Guid)">
            <summary>
            Deletes the current draft revision for the page
            with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPageRepository.DeleteComment(System.Guid)">
            <summary>
            Deletes the comment with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPageTypeRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IPageTypeRepository.GetById(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Repositories.IPageTypeRepository.Save(Piranha.Models.PageType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IPageTypeRepository.Delete(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IParamRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IParamRepository.GetById(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or NULL if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Repositories.IParamRepository.GetByKey(System.String)">
            <summary>
            Gets the model with the given internal id.
            </summary>
            <param name="key">The unique key</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.IParamRepository.Save(Piranha.Models.Param)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IParamRepository.Delete(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAll(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="blogId">The unique id</param>
            <param name="index">The optional page to fetch</param>
            <param name="pageSize">The optional page size</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAllBySiteId(System.Guid)">
            <summary>
            Gets the available posts for the specified site.
            </summary>
            <param name="siteId">The site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAllCategories(System.Guid)">
            <summary>
            Gets all available categories for the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The available categories</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAllTags(System.Guid)">
            <summary>
            Gets all available tags for the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The available tags</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAllDrafts(System.Guid)">
            <summary>
            Gets the id of all posts that have a draft for
            the specified blog.
            </summary>
            <param name="blogId">The unique blog id</param>
            <returns>The posts that have a draft</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAllComments(System.Nullable{System.Guid},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets the comments available for the post with the specified id.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="page">The page number</param>
            <param name="pageSize">The page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetAllPendingComments(System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            Gets the pending comments available for the post with the specified id.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="page">The page number</param>
            <param name="pageSize">The page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetById``1(System.Guid)">
            <summary>
            Gets the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetBySlug``1(System.Guid,System.String)">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetDraftById``1(System.Guid)">
            <summary>
            Gets the draft for the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetCount(System.Guid)">
            <summary>
            Gets the number of available posts in the specified archive.
            </summary>
            <param name="archiveId">The archive id</param>
            <returns>The number of posts</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetCategoryById(System.Guid)">
            <summary>
            Gets the category with the id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetCategoryBySlug(System.Guid,System.String)">
            <summary>
            Gets the category with the given slug.
            </summary>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The category</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetTagById(System.Guid)">
            <summary>
            Gets the tag with the id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetTagBySlug(System.Guid,System.String)">
            <summary>
            Gets the tag with the given slug.
            </summary>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The tag</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.GetCommentById(System.Guid)">
            <summary>
            Gets the comment with the given id.
            </summary>
            <param name="id">The comment id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.Save``1(``0)">
            <summary>
            Saves the given post model
            </summary>
            <param name="model">The post model</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.SaveDraft``1(``0)">
            <summary>
            Saves the given model as a draft revision.
            </summary>
            <param name="model">The post model</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.SaveComment(System.Guid,Piranha.Models.Comment)">
            <summary>
            Saves the comment.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="model">The comment model</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.CreateRevision(System.Guid,System.Int32)">
            <summary>
            Creates a revision from the current version
            of the post with the given id.
            </summary>
            <param name="id">The unique id</param>
            <param name="revisions">The maximum number of revisions that should be stored</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.Delete(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.DeleteDraft(System.Guid)">
            <summary>
            Deletes the current draft revision for the post
            with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPostRepository.DeleteComment(System.Guid)">
            <summary>
            Deletes the comment with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.IPostTypeRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.IPostTypeRepository.GetById(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Repositories.IPostTypeRepository.Save(Piranha.Models.PostType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.IPostTypeRepository.Delete(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetById(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or NULL if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetByInternalId(System.String)">
            <summary>
            Gets the model with the given internal id.
            </summary>
            <param name="internalId">The unique internal i</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetDefault">
            <summary>
            Gets the default side.
            </summary>
            <returns>The modell, or NULL if it doesnt exist</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetContentById(System.Guid)">
            <summary>
            Gets the site content for given site id.
            </summary>
            <param name="id">Site id</param>
            <returns>The site content model</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetContentById``1(System.Guid)">
            <summary>
            Gets the site content for given site id.
            </summary>
            <param name="id">Site id</param>
            <typeparam name="T">The site model type</typeparam>
            <returns>The site content model</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.GetSitemap(System.Guid,System.Boolean)">
            <summary>
            Gets the hierachical sitemap structure.
            </summary>
            <param name="id">The site id</param>
            <param name="onlyPublished">If only published items should be included</param>
            <returns>The sitemap</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.Save(Piranha.Models.Site)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.SaveContent``1(System.Guid,``0)">
            <summary>
            Saves the given site content to the site with the
            given id.
            </summary>
            <param name="siteId">The site id</param>
            <param name="content">The site content</param>
            <typeparam name="T">The site content type</typeparam>
        </member>
        <member name="M:Piranha.Repositories.ISiteRepository.Delete(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Repositories.ISiteTypeRepository.GetAll">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteTypeRepository.GetById(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Repositories.ISiteTypeRepository.Save(Piranha.Models.SiteType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Repositories.ISiteTypeRepository.Delete(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.Name">
            <summary>
            Gets/sets the display name.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.Category">
            <summary>
            Gets/sets the category.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.Icon">
            <summary>
            Gets/sets the block icon.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.ListTitleField">
            <summary>
            Gets/sets the field that should be used to render list item title.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.IsUnlisted">
            <summary>
            Gets/sets if the block type should only be listed
            where specified explicitly.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.IsGeneric">
            <summary>
            Gets/sets if the block should use a generic model
            when rendered in the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.Component">
            <summary>
            Gets/sets the name of the component that should be
            used to render the block in the manager interface.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.Width">
            <summary>
            Gets/sets the editor width.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppBlock.ItemTypes">
            <summary>
            Gets/sets the specified item types.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.AppBlockList.GetCategories">
            <summary>
            Gets the block categories sorted in alphabetical order.
            </summary>
            <returns>The category types</returns>
        </member>
        <member name="M:Piranha.Runtime.AppBlockList.GetByCategory(System.String,System.Boolean)">
            <summary>
            Gets the blocks for the given category.
            </summary>
            <param name="category">The category</param>
            <param name="includeGroups">If block groups should be included</param>
            <returns>The block types</returns>
        </member>
        <member name="M:Piranha.Runtime.AppBlockList.OnRegister``1(Piranha.Runtime.AppBlock)">
            <summary>
            Performs additional processing on the item before
            adding it to the collection.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
            <param name="item">The item</param>
            <returns>The processed item</returns>
        </member>
        <member name="T:Piranha.Runtime.AppDataItem">
            <summary>
            An item in an app data list.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppDataItem.Type">
            <summary>
            Gets/sets the type.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppDataItem.TypeName">
            <summary>
            Gets/sets the full type name.
            </summary>
        </member>
        <member name="F:Piranha.Runtime.AppDataList`2._items">
            <summary>
            The items collection.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.Register``1">
            <summary>
            Registers a new item.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.UnRegister``1">
            <summary>
            Unregisters a previously registered item.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.GetByType(System.Type)">
            <summary>
            Gets a single item by its type.
            </summary>
            <param name="type">The type</param>
            <returns>The item, null if not found</returns>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.GetByType(System.String)">
            <summary>
            Gets a single item by its full type name.
            </summary>
            <param name="typeName">The type name</param>
            <returns>The item, null if not found</returns>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.GetEnumerator">
            <summary>
            Gets the generic enumerator for the items.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the items.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Piranha.Runtime.AppDataList`2.OnRegister``1(`1)">
            <summary>
            Performs additional processing on the item before
            adding it to the collection.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
            <param name="item">The item</param>
            <returns>The processed item</returns>
        </member>
        <member name="P:Piranha.Runtime.AppField.Name">
            <summary>
            Gets/sets the display name.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppField.Shorthand">
            <summary>
            Gets/sets the shorthand name.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.AppField.Component">
            <summary>
            Gets/sets the name of the component that should be
            used to render the field in the manager interface.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.AppFieldList.GetByShorthand(System.String)">
            <summary>
            Gets a single item by its shorthand name.
            </summary>
            <param name="shorthand">The shorthand name</param>
            <returns>The item, null if not found</returns>
        </member>
        <member name="M:Piranha.Runtime.AppFieldList.OnRegister``1(Piranha.Runtime.AppField)">
            <summary>
            Performs additional processing on the item before
            adding it to the collection.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
            <param name="item">The item</param>
            <returns>The processed item</returns>
        </member>
        <member name="M:Piranha.Runtime.AppFieldList.RegisterSelect``1">
            <summary>
            Registers a new select field and its associated serializer.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.AppFieldList.RegisterDataSelect``1">
            <summary>
            Registers a new data select field and its associated serializer.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="P:Piranha.Runtime.AppModule.Instance">
            <summary>
            Gets/sets the module instance.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.AppModuleList.Get``1">
            <summary>
            Gets the module instance of the given type.
            </summary>
            <typeparam name="T">The module type</typeparam>
            <returns>The module instance</returns>
        </member>
        <member name="M:Piranha.Runtime.AppModuleList.OnRegister``1(Piranha.Runtime.AppModule)">
            <summary>
            Performs additional processing on the item before
            adding it to the collection.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
            <param name="item">The item</param>
            <returns>The processed item</returns>
        </member>
        <member name="M:Piranha.Runtime.CachedList`1.Init(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the model from the given list of types.
            </summary>
            <param name="types">The content types</param>
        </member>
        <member name="M:Piranha.Runtime.CachedList`1.GetById(System.String)">
            <summary>
            Gets the content type with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The content type</returns>
        </member>
        <member name="T:Piranha.Runtime.HookManager.ServiceHooks`1">
            <summary>
            The standard repository hooks for a data model.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ServiceHooks`1.RegisterOnLoad(Piranha.Runtime.HookManager.ModelDelegate{`0})">
            <summary>
            Registers a new hook to be executed after the model
            has been loaded but BEFORE it has been added into
            the cache.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ServiceHooks`1.RegisterOnBeforeSave(Piranha.Runtime.HookManager.ModelDelegate{`0})">
            <summary>
            Registers a new hook to be executed before the model
            is saved to the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ServiceHooks`1.RegisterOnAfterSave(Piranha.Runtime.HookManager.ModelDelegate{`0})">
            <summary>
            Registers a new hook to be executed after the model
            is saved to the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ServiceHooks`1.RegisterOnBeforeDelete(Piranha.Runtime.HookManager.ModelDelegate{`0})">
            <summary>
            Registers a new hook to be executed before the model
            is deleted from the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ServiceHooks`1.RegisterOnAfterDelete(Piranha.Runtime.HookManager.ModelDelegate{`0})">
            <summary>
            Registers a new hook to be executed after the model
            is deleted from the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ServiceHooks`1.Clear">
            <summary>
            Removes all registered hooks.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.HookManager.ValidationServiceHooks`1.RegisterOnValidate(Piranha.Runtime.HookManager.ModelDelegate{`0})">
            <summary>
            Registers a new hook to be executed after the OnBeforeSave
            hook as been executed but before the model is saved to the
            database. This hook should be used to extend default model
            validation.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.SitemapServiceHooks.RegisterOnLoad(Piranha.Runtime.HookManager.ModelDelegate{Piranha.Models.Sitemap})">
            <summary>
            Registers a new hook to be executed after the sitemap
            has been loaded but BEFORE it has been added into
            the cache.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.SitemapServiceHooks.RegisterOnInvalidate(Piranha.Runtime.HookManager.ModelDelegate{Piranha.Models.Sitemap})">
            <summary>
            Registers a new hook to be executed when the sitemap
            is invalidated due to a change in the site structure.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="T:Piranha.Runtime.HookManager.ModelDelegate`1">
            <summary>
            Delegate for repository events.
            </summary>
        </member>
        <member name="T:Piranha.Runtime.HookManager.SlugDelegate">
            <summary>
            Delegate for generating a slug.
            </summary>
            <param name="str">The input string</param>
            <returns>The generated slug</returns>
        </member>
        <member name="T:Piranha.Runtime.HookManager.SitemapDelegate">
            <summary>
            Delegate for generating the public sitemap.
            </summary>
            <param name="sitemap">The default sitemap</param>
            <returns>The updated sitemap</returns>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Alias">
            <summary>
            Gets the hooks available for aliases.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Comments">
            <summary>
            Gets the hooks available for comments.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Media">
            <summary>
            Gets the hooks available for media.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.MediaFolder">
            <summary>
            Gets the hooks available for media folders.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Pages">
            <summary>
            Gets the hooks available for pages.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Param">
            <summary>
            Gets the hooks available for params.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.GenericContent">
            <summary>
            Gets the hooks available for generic content.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Posts">
            <summary>
            Gets the hooks available for posts.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Site">
            <summary>
            Gets the hooks available for sites.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.SiteContent">
            <summary>
            Gets the hooks available for sites.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.Sitemap">
            <summary>
            Gets the hooks available for sitemaps.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.OnGenerateSlug">
            <summary>
            Gets the hook for slug generation.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.HookManager.OnGenerateSitemap">
            <summary>
            Gets the hook for generating the public sitemap.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.HookManager.Clear``1">
            <summary>
            Removes all hooks for the specified model type.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.HookManager.RegisterOnLoad``1(Piranha.Runtime.HookManager.ModelDelegate{``0})">
            <summary>
            Registers a new hook to be executed after the model
            has been loaded but BEFORE it has been added into
            the cache.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.RegisterOnBeforeSave``1(Piranha.Runtime.HookManager.ModelDelegate{``0})">
            <summary>
            Registers a new hook to be executed before the model
            is saved to the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.RegisterOnValidate``1(Piranha.Runtime.HookManager.ModelDelegate{``0})">
            <summary>
            Registers a new hook to be executed before the model
            is saved to the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.RegisterOnAfterSave``1(Piranha.Runtime.HookManager.ModelDelegate{``0})">
            <summary>
            Registers a new hook to be executed after the model
            is saved to the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.RegisterOnBeforeDelete``1(Piranha.Runtime.HookManager.ModelDelegate{``0})">
            <summary>
            Registers a new hook to be executed before the model
            is deleted from the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.RegisterOnAfterDelete``1(Piranha.Runtime.HookManager.ModelDelegate{``0})">
            <summary>
            Registers a new hook to be executed after the model
            is deleted from the database.
            </summary>
            <param name="hook">The hook</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.OnLoad``1(``0)">
            <summary>
            Executes the registered hooks on the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.OnBeforeSave``1(``0)">
            <summary>
            Executes the registered hooks on the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.OnValidate``1(``0)">
            <summary>
            Executes the registered hooks on the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.OnAfterSave``1(``0)">
            <summary>
            Executes the registered hooks on the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.OnBeforeDelete``1(``0)">
            <summary>
            Executes the registered hooks on the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Runtime.HookManager.OnAfterDelete``1(``0)">
            <summary>
            Executes the registered hooks on the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="T:Piranha.Runtime.MediaManager.MediaTypeItem">
            <summary>
            A registered media type.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.MediaTypeItem.Extension">
            <summary>
            Gets/sets the file extension.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.MediaTypeItem.ContentType">
            <summary>
            Gets/sets the content type.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.MediaTypeItem.AllowProcessing">
            <summary>
            If image processing should be applied to this media type.
            </summary>
        </member>
        <member name="T:Piranha.Runtime.MediaManager.MediaTypeList">
            <summary>
            A list of media types.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.MediaTypeList.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="allowProcessing">If image processing should be applied by default</param>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.MediaTypeList.Add(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new media type.
            </summary>
            <param name="extension">The file extension</param>
            <param name="contentType">The content type</param>
            <param name="allowProcessing">If image processing should be allowed</param>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.MediaTypeList.ContainsExtension(System.String)">
            <summary>
            Gets if the list contains an item with the given extension.
            </summary>
            <param name="extension">The file extension</param>
            <returns>If the extension exists</returns>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.Documents">
            <summary>
            Gets/sets the currently accepted document extensions.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.Images">
            <summary>
            Gets/sets the currently accepted image extensions.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.Videos">
            <summary>
            Gets/sets the currently accepted video extensions.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.Audio">
            <summary>
            Gets/sets the currently accepted audio extensions.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.Resources">
            <summary>
            Gets/sets the currently accepted resource extensions.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.MediaManager.MetaProperties">
            <summary>
            Gets/sets the currently registered meta properties for media.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.IsSupported(System.String)">
            <summary>
            Checks if the given filename has a supported extension.
            </summary>
            <param name="filename">The path or filename</param>
            <returns>If it is supported</returns>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.GetMediaType(System.String)">
            <summary>
            Gets the media type for the given filename based on
            its extension.
            </summary>
            <param name="filename">The path or filename</param>
            <returns>The media type</returns>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.GetContentType(System.String)">
            <summary>
            Gets the content type for the given filename based on
            its extension.
            </summary>
            <param name="filename">The path or filename</param>
            <returns>The media type</returns>
        </member>
        <member name="M:Piranha.Runtime.MediaManager.GetItem(System.String)">
            <summary>
            Gets the media type item for the given filename based on its extensions.
            </summary>
            <param name="filename">The path or filename</param>
            <returns>The media type item</returns>
        </member>
        <member name="F:Piranha.Runtime.SerializerManager._serializers">
            <summary>
            The currently available serializers.
            </summary>
        </member>
        <member name="P:Piranha.Runtime.SerializerManager.Item(System.Type)">
            <summary>
            Gets the serializer for the specified type.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.SerializerManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Piranha.Runtime.SerializerManager.Register``1(Piranha.Extend.ISerializer)">
            <summary>
            Registers the given serializer for the specified type
            </summary>
            <param name="serializer">The serializer</param>
        </member>
        <member name="M:Piranha.Runtime.SerializerManager.UnRegister``1">
            <summary>
            Unregisters the current serializer for the specified type
            </summary>
        </member>
        <member name="T:Piranha.Security.PermissionItem">
            <summary>
            An item in the permission manager.
            </summary>
        </member>
        <member name="P:Piranha.Security.PermissionItem.Name">
            <summary>
            The name of the claim.
            </summary>
        </member>
        <member name="P:Piranha.Security.PermissionItem.Title">
            <summary>
            The display title.
            </summary>
        </member>
        <member name="P:Piranha.Security.PermissionItem.Category">
            <summary>
            Gets/sets the optional category for grouping.
            </summary>
        </member>
        <member name="P:Piranha.Security.PermissionItem.IsInternal">
            <summary>
            Gets/sets if this is an internal permissions used
            by Piranha.
            </summary>
        </member>
        <member name="T:Piranha.Security.PermissionManager">
            <summary>
            The permission manager.
            </summary>
        </member>
        <member name="P:Piranha.Security.PermissionManager.Item(System.String)">
            <summary>
            Gets the permission items for the given module.
            </summary>
        </member>
        <member name="M:Piranha.Security.PermissionManager.GetModules">
            <summary>
            Gets the registered permission modules.
            </summary>
            <returns>The module names</returns>
        </member>
        <member name="M:Piranha.Security.PermissionManager.GetPermissions(System.String)">
            <summary>
            Gets the permissions for the given module.
            </summary>
            <param name="module">The module name</param>
            <returns>The available permissions</returns>
        </member>
        <member name="M:Piranha.Security.PermissionManager.GetPermissions">
            <summary>
            Gets all of the available permissions.
            </summary>
            <returns>The available permissions</returns>
        </member>
        <member name="M:Piranha.Security.PermissionManager.GetPublicPermissions">
            <summary>
            Gets all of available permissions that is not internal.
            </summary>
            <returns>The available permissions</returns>
        </member>
        <member name="T:Piranha.Security.Permission">
            <summary>
            The available core permissions.
            </summary>
        </member>
        <member name="M:Piranha.Services.AliasService.#ctor(Piranha.Repositories.IAliasRepository,Piranha.Services.ISiteService,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="siteService">The site service</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.AliasService.GetAllAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all available models for the specified site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.AliasService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.AliasService.GetByAliasUrlAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the model with the given alias url.
            </summary>
            <param name="url">The unique url</param>
            <param name="siteId">The optional site id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.AliasService.GetByRedirectUrlAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the model with the given redirect url.
            </summary>
            <param name="url">The unique url</param>
            <param name="siteId">The optional site id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.AliasService.SaveAsync(Piranha.Models.Alias)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.AliasService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.AliasService.DeleteAsync(Piranha.Models.Alias)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.AliasService.OnLoad(Piranha.Models.Alias)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.AliasService.RemoveFromCache(Piranha.Models.Alias)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ArchiveService.#ctor(Piranha.Repositories.IArchiveRepository,Piranha.Services.IParamService,Piranha.Services.IPostService)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="paramService">The param service</param>
            <param name="postService">The post service</param>
        </member>
        <member name="M:Piranha.Services.ArchiveService.GetByIdAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the post archive for the specified archive page
            with the given filters applied.
            </summary>
            <param name="archiveId">The unique archive page id</param>
            <param name="currentPage">The optional page number</param>
            <param name="categoryId">The optional category id</param>
            <param name="tagId">The optional tag id</param>
            <param name="year">The optional year</param>
            <param name="month">The optional year</param>
            <param name="pageSize">The optional page size. If not provided, this will be read from config</param>
            <returns>The post archive</returns>
        </member>
        <member name="M:Piranha.Services.ArchiveService.GetByIdAsync``1(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the post archive for the specified archive page
            with the given filters applied.
            </summary>
            <param name="archiveId">The unique archive page id</param>
            <param name="currentPage">The optional page number</param>
            <param name="categoryId">The optional category id</param>
            <param name="tagId">The optional tag id</param>
            <param name="year">The optional year</param>
            <param name="month">The optional year</param>
            <param name="pageSize">The optional page size. If not provided, this will be read from config</param>
            <typeparam name="T">The post type</typeparam>
            <returns>The post archive</returns>
        </member>
        <member name="T:Piranha.Services.ContentFactory">
            <summary>
            The content factory is responsible for creating models and
            initializing them after they have been loaded.
            </summary>
        </member>
        <member name="M:Piranha.Services.ContentFactory.#ctor(System.IServiceProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="services">The current service provider</param>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateAsync``1(Piranha.Models.ContentTypeBase)">
            <summary>
            Creates and initializes a new content model.
            </summary>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The new model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateDynamicRegionAsync(Piranha.Models.ContentTypeBase,System.String,System.Boolean)">
            <summary>
            Creates a new dynamic region.
            </summary>
            <param name="type">The content type</param>
            <param name="regionId">The region id</param>
            <param name="managerInit">If manager initialization should be performed</param>
            <returns>The new region value</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateBlockAsync(System.String,System.Boolean)">
            <summary>
            Creates and initializes a new block of the specified type.
            </summary>
            <param name="typeName">The type name</param>
            <param name="managerInit">If manager initialization should be performed</param>
            <returns>The new block</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateDynamicModelAsync``1(Piranha.Models.ContentTypeBase)">
            <summary>
            Creates and initializes a new dynamic model.
            </summary>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The new model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateModelAsync``1(Piranha.Models.ContentTypeBase)">
            <summary>
            Creates and initializes a new dynamic model.
            </summary>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The new model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitDynamicAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given dynamic model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitDynamicManagerAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given dynamic model for the manager.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitDynamicAsync``1(``0,Piranha.Models.ContentTypeBase,System.Boolean)">
            <summary>
            Initializes the given dynamic model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <param name="managerInit">If this is initialization used by the manager</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitManagerAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given model for the manager.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitFieldAsync(System.Object,System.Boolean)">
            <summary>
            Initializes the given field.
            </summary>
            <param name="field">The field</param>
            <param name="managerInit">If this is initialization used by the manager</param>
            <returns>The initialized field</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitAsync``1(``0,Piranha.Models.ContentTypeBase,System.Boolean)">
            <summary>
            Initializes the given model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <param name="managerInit">If this is initialization used by the manager</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitDynamicRegionAsync(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,Piranha.Models.ContentTypeRegion,System.Boolean)">
            <summary>
            Initializes all fields in the given dynamic region.
            </summary>
            <param name="scope">The current service scope</param>
            <param name="region">The region</param>
            <param name="regionType">The region type</param>
            <param name="managerInit">If this is initialization used by the manager</param>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitRegionAsync(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,Piranha.Models.ContentTypeRegion,System.Boolean)">
            <summary>
            Initializes all fields in the given region.
            </summary>
            <param name="scope">The current service scope</param>
            <param name="region">The region</param>
            <param name="regionType">The region type</param>
            <param name="managerInit">If this is initialization used by the manager</param>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitBlockAsync(Microsoft.Extensions.DependencyInjection.IServiceScope,Piranha.Extend.Block,System.Boolean)">
            <summary>
            Initializes all fields in the given block.
            </summary>
            <param name="scope">The current service scope</param>
            <param name="block">The block</param>
            <param name="managerInit">If this is initialization used by the manager</param>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateDynamicRegionAsync(Microsoft.Extensions.DependencyInjection.IServiceScope,Piranha.Models.ContentTypeRegion,System.Boolean,System.Boolean)">
            <summary>
            Creates a new dynamic region.
            </summary>
            <param name="scope">The current service scope</param>
            <param name="regionType">The region type</param>
            <param name="initFields">If fields should be initialized</param>
            <param name="managerInit">If manager init should be performed on the fields</param>
            <returns>The created region</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateRegionAsync(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Type,Piranha.Models.ContentTypeRegion,System.Boolean)">
            <summary>
            Creates a new region.
            </summary>
            <param name="scope">The current service scope</param>
            <param name="model">The model to create the region for</param>
            <param name="modelType">The model type</param>
            <param name="regionType">The region type</param>
            <param name="initFields">If fields should be initialized</param>
            <returns>The created region</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.CreateField(Piranha.Models.ContentTypeField)">
            <summary>
            Creates a new instance of the given field type.
            </summary>
            <param name="fieldType">The field type</param>
            <returns>The new instance</returns>
        </member>
        <member name="M:Piranha.Services.ContentFactory.InitFieldAsync(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Boolean)">
            <summary>
            Initializes the given field.
            </summary>
            <param name="scope">The current service scope</param>
            <param name="field">The field</param>
            <param name="managerInit">If this is initialization used by the manager</param>
            <returns>The initialized field</returns>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.#ctor(Piranha.Repositories.IContentGroupRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.SaveAsync(Piranha.Models.ContentGroup)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.DeleteAsync(Piranha.Models.ContentGroup)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ContentGroupService.GetGroups">
            <summary>
            Gets the content types from the database.
            </summary>
        </member>
        <member name="M:Piranha.Services.ContentService.#ctor(Piranha.Repositories.IContentRepository,Piranha.Services.IContentFactory,Piranha.Services.ILanguageService,Piranha.ICache,Piranha.ISearch)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The page repository</param>
            <param name="factory">The content factory</param>
            <param name="langService">The language service</param>
            <param name="cache">The optional cache service</param>
            <param name="search">The optional search service</param>
        </member>
        <member name="M:Piranha.Services.ContentService.CreateAsync``1(System.String)">
            <summary>
            Creates and initializes a new content model.
            </summary>
            <param name="typeId">The content type id</param>
            <returns>The created page</returns>
        </member>
        <member name="M:Piranha.Services.ContentService.GetAllAsync(System.String)">
            <summary>
            Gets all of the available content for the optional
            group id.
            </summary>
            <param name="groupId">The optional group id</param>
            <returns>The available content</returns>
        </member>
        <member name="M:Piranha.Services.ContentService.GetAllAsync``1(System.String)">
            <summary>
            Gets all of the available content for the optional
            group id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="groupId">The optional group id</param>
            <returns>The available content</returns>
        </member>
        <member name="M:Piranha.Services.ContentService.GetByIdAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets the content model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <param name="languageId">The optional language id</param>
            <returns>The content model</returns>
        </member>
        <member name="M:Piranha.Services.ContentService.GetByIdAsync``1(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets the content model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <param name="languageId">The optional language id</param>
            <returns>The content model</returns>
        </member>
        <member name="M:Piranha.Services.ContentService.SaveAsync``1(``0,System.Nullable{System.Guid})">
            <summary>
            Saves the given content model
            </summary>
            <param name="model">The content model</param>
            <param name="languageId">The optional language id</param>
        </member>
        <member name="M:Piranha.Services.ContentService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the content model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ContentService.DeleteAsync``1(``0)">
            <summary>
            Deletes the given content model.
            </summary>
            <param name="model">The content model</param>
        </member>
        <member name="M:Piranha.Services.ContentService.OnLoadAsync(Piranha.Models.GenericContent)">
            <summary>
            Processes the model after it has been loaded from
            the repository.
            </summary>
            <param name="model">The content model</param>
        </member>
        <member name="M:Piranha.Services.ContentService.RemoveFromCacheAsync(Piranha.Models.GenericContent)">
            <summary>
            Removes the given model from the cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.#ctor(Piranha.Repositories.IContentTypeRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.GetByGroupAsync(System.String)">
            <summary>
            Gets all available models from the specified group.
            </summary>
            <param name="group">The content group</param>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.SaveAsync(Piranha.Models.ContentType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.DeleteAsync(Piranha.Models.ContentType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.ContentType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.ContentTypeService.GetTypes">
            <summary>
            Gets the content types from the database.
            </summary>
        </member>
        <member name="M:Piranha.Services.IAliasService.GetAllAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all available models for the specified site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IAliasService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.IAliasService.GetByAliasUrlAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the model with the given alias url.
            </summary>
            <param name="url">The unique url</param>
            <param name="siteId">The optional site id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IAliasService.GetByRedirectUrlAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the model with the given redirect url.
            </summary>
            <param name="url">The unique url</param>
            <param name="siteId">The optional site id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IAliasService.SaveAsync(Piranha.Models.Alias)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IAliasService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IAliasService.DeleteAsync(Piranha.Models.Alias)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IArchiveService.GetByIdAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the post archive for the specified archive page
            with the given filters applied.
            </summary>
            <param name="archiveId">The unique archive page id</param>
            <param name="currentPage">The optional page number</param>
            <param name="categoryId">The optional category id</param>
            <param name="tagId">The optional tag id</param>
            <param name="year">The optional year</param>
            <param name="month">The optional year</param>
            <param name="pageSize">The optional page size. If not provided, this will be read from config</param>
            <returns>The post archive</returns>
        </member>
        <member name="M:Piranha.Services.IArchiveService.GetByIdAsync``1(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the post archive for the specified archive page
            with the given filters applied.
            </summary>
            <param name="archiveId">The unique archive page id</param>
            <param name="currentPage">The optional page number</param>
            <param name="categoryId">The optional category id</param>
            <param name="tagId">The optional tag id</param>
            <param name="year">The optional year</param>
            <param name="month">The optional year</param>
            <param name="pageSize">The optional page size. If not provided, this will be read from config</param>
            <typeparam name="T">The post type</typeparam>
            <returns>The post archive</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.CreateAsync``1(Piranha.Models.ContentTypeBase)">
            <summary>
            Creates and initializes a new content model.
            </summary>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The new model</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.CreateDynamicRegionAsync(Piranha.Models.ContentTypeBase,System.String,System.Boolean)">
            <summary>
            Creates a new dynamic region.
            </summary>
            <param name="type">The content type</param>
            <param name="regionId">The region id</param>
            <param name="managerInit">If manager initialization should be performed</param>
            <returns>The new region value</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.CreateBlockAsync(System.String,System.Boolean)">
            <summary>
            Creates and initializes a new block of the specified type.
            </summary>
            <param name="typeName">The type name</param>
            <param name="managerInit">If manager initialization should be performed</param>
            <returns>The new block</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.InitAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.InitManagerAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given model for the manager.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.InitDynamicAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given dynamic model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.InitDynamicManagerAsync``1(``0,Piranha.Models.ContentTypeBase)">
            <summary>
            Initializes the given dynamic model.
            </summary>
            <param name="model">The model</param>
            <param name="type">The content type</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The initialized model</returns>
        </member>
        <member name="M:Piranha.Services.IContentFactory.InitFieldAsync(System.Object,System.Boolean)">
            <summary>
            Initializes the given field.
            </summary>
            <param name="field">The field</param>
            <param name="managerInit">If this is initialization used by the manager</param>
            <returns>The initialized field</returns>
        </member>
        <member name="M:Piranha.Services.IContentGroupService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IContentGroupService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IContentGroupService.SaveAsync(Piranha.Models.ContentGroup)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IContentGroupService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IContentGroupService.DeleteAsync(Piranha.Models.ContentGroup)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IContentService.CreateAsync``1(System.String)">
            <summary>
            Creates and initializes a new content model.
            </summary>
            <param name="typeId">The content type id</param>
            <returns>The created page</returns>
        </member>
        <member name="M:Piranha.Services.IContentService.GetAllAsync(System.String)">
            <summary>
            Gets all of the available content for the optional
            group id.
            </summary>
            <param name="groupId">The optional group id</param>
            <returns>The available content</returns>
        </member>
        <member name="M:Piranha.Services.IContentService.GetAllAsync``1(System.String)">
            <summary>
            Gets all of the available content for the optional
            group id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="groupId">The optional group id</param>
            <returns>The available content</returns>
        </member>
        <member name="M:Piranha.Services.IContentService.GetByIdAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets the content model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <param name="languageId">The optional language id</param>
            <returns>The content model</returns>
        </member>
        <member name="M:Piranha.Services.IContentService.GetByIdAsync``1(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets the content model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <param name="languageId">The optional language id</param>
            <returns>The content model</returns>
        </member>
        <member name="M:Piranha.Services.IContentService.SaveAsync``1(``0,System.Nullable{System.Guid})">
            <summary>
            Saves the given content model
            </summary>
            <param name="model">The content model</param>
            <param name="languageId">The optional language id</param>
        </member>
        <member name="M:Piranha.Services.IContentService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the content model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IContentService.DeleteAsync``1(``0)">
            <summary>
            Deletes the given content model.
            </summary>
            <param name="model">The content model</param>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.GetByGroupAsync(System.String)">
            <summary>
            Gets all available models from the specified group.
            </summary>
            <param name="group">The content group</param>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.SaveAsync(Piranha.Models.ContentType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.DeleteAsync(Piranha.Models.ContentType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IContentTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.ContentType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.ILanguageService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ILanguageService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.ILanguageService.GetDefaultAsync">
            <summary>
            Gets the default side.
            </summary>
            <returns>The modell</returns>
        </member>
        <member name="M:Piranha.Services.ILanguageService.SaveAsync(Piranha.Models.Language)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ILanguageService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ILanguageService.DeleteAsync(Piranha.Models.Language)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.GetAllByFolderIdAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all media available in the specified folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The available media</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.CountFolderItemsAsync(System.Nullable{System.Guid})">
            <summary>
            Get the amount of media available in the specified folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The quantity of media items present.</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.GetAllFoldersAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all media folders available in the specified
            folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The available media folders</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the media with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The media</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.GetByIdAsync(System.Guid[])">
            <summary>
            Gets the media with the given id.
            </summary>
            <param name="ids">The unique id</param>
            <returns>The media</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.GetFolderByIdAsync(System.Guid)">
            <summary>
            Gets the media folder with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The media folder</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.GetStructureAsync">
            <summary>
            Gets the hierachical media structure.
            </summary>
            <returns>The media structure</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.SaveAsync(Piranha.Models.Media)">
            <summary>
            Updates the meta data for the given media model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.SaveAsync(Piranha.Models.MediaContent)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="content">The content to save</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.SaveFolderAsync(Piranha.Models.MediaFolder)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.MoveAsync(Piranha.Models.Media,System.Nullable{System.Guid})">
            <summary>
            Moves the media to the folder with the specified id.
            </summary>
            <param name="model">The model</param>
            <param name="folderId">The folder id</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.EnsureVersion(System.Guid,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Ensures that the image version with the given size exsists
            and returns its public URL.
            </summary>
            <param name="id">The unique id</param>
            <param name="width">The requested width</param>
            <param name="height">The optionally requested height</param>
            <returns>The public URL</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.EnsureVersionAsync(System.Guid,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Ensures that the image version with the given size exsists
            and returns its public URL.
            </summary>
            <param name="id">The unique id</param>
            <param name="width">The requested width</param>
            <param name="height">The optionally requested height</param>
            <returns>The public URL</returns>
        </member>
        <member name="M:Piranha.Services.IMediaService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the media with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.DeleteAsync(Piranha.Models.Media)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The media</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.DeleteFolderAsync(System.Guid)">
            <summary>
            Deletes the media folder with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IMediaService.DeleteFolderAsync(Piranha.Models.MediaFolder)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The media</param>
        </member>
        <member name="M:Piranha.Services.IPageService.CreateAsync``1(System.String)">
            <summary>
            Creates and initializes a new page of the specified type.
            </summary>
            <returns>The created page</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.CopyAsync``1(``0)">
            <summary>
            Creates and initializes a copy of the given page.
            </summary>
            <param name="originalPage">The orginal page</param>
            <returns>The created copy</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.DetachAsync``1(``0)">
            <summary>
            Detaches a copy and initializes it as a standalone page
            </summary>
            <returns>The standalone page</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllBlogsAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the available blog pages for the current site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The pages</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllBlogsAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets the available blog pages for the current site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The pages</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllDraftsAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the id of all pages that have a draft for
            the specified site.
            </summary>
            <param name="siteId">The unique site id</param>
            <returns>The pages that have a draft</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllCommentsAsync(System.Nullable{System.Guid},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the comments available for the page with the specified id. If no page id
            is provided all comments are fetched.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetAllPendingCommentsAsync(System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the pending comments available for the page with the specified id. If no page id
            is provided all comments are fetched.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetStartpageAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the site startpage.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetStartpageAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets the site startpage.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the page model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetByIdsAsync``1(System.Guid[])">
            <summary>
            Gets the page models with the specified id's.
            </summary>
            <param name="ids">The unique id's</param>
            <returns>The page models</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetByIdAsync``1(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetBySlugAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the page model with the specified slug.
            </summary>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetBySlugAsync``1(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the page model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetIdBySlugAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the id for the page with the given slug.
            </summary>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional page id</param>
            <returns>The id</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetDraftByIdAsync(System.Guid)">
            <summary>
            Gets the draft for the page model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.GetDraftByIdAsync``1(System.Guid)">
            <summary>
            Gets the draft for the page model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.MoveAsync``1(``0,System.Nullable{System.Guid},System.Int32)">
            <summary>
            Moves the current page in the structure.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The page to move</param>
            <param name="parentId">The new parent id</param>
            <param name="sortOrder">The new sort order</param>
        </member>
        <member name="M:Piranha.Services.IPageService.GetCommentByIdAsync(System.Guid)">
            <summary>
            Gets the comment with the given id.
            </summary>
            <param name="id">The comment id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPageService.SaveAsync``1(``0)">
            <summary>
            Saves the given page model
            </summary>
            <param name="model">The page model</param>
        </member>
        <member name="M:Piranha.Services.IPageService.SaveDraftAsync``1(``0)">
            <summary>
            Saves the given page model as a draft
            </summary>
            <param name="model">The page model</param>
        </member>
        <member name="M:Piranha.Services.IPageService.SaveCommentAsync(System.Guid,Piranha.Models.PageComment)">
            <summary>
            Saves the comment.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="model">The comment model</param>
        </member>
        <member name="M:Piranha.Services.IPageService.SaveCommentAndVerifyAsync(System.Guid,Piranha.Models.PageComment)">
            <summary>
            Saves the comment and verifies if should be approved or not.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="model">The comment model</param>
        </member>
        <member name="M:Piranha.Services.IPageService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IPageService.DeleteAsync``1(``0)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPageService.DeleteCommentAsync(System.Guid)">
            <summary>
            Deletes the comment with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IPageService.DeleteCommentAsync(Piranha.Models.Comment)">
            <summary>
            Deletes the given comment.
            </summary>
            <param name="model">The comment</param>
        </member>
        <member name="M:Piranha.Services.IPageTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IPageTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPageTypeService.SaveAsync(Piranha.Models.PageType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPageTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IPageTypeService.DeleteAsync(Piranha.Models.PageType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPageTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.PageType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.IParamService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IParamService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.IParamService.GetByKeyAsync(System.String)">
            <summary>
            Gets the model with the given key.
            </summary>
            <param name="key">The unique key</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IParamService.SaveAsync(Piranha.Models.Param)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IParamService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IParamService.DeleteAsync(Piranha.Models.Param)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPostService.CreateAsync``1(System.String)">
            <summary>
            Creates and initializes a new post of the specified type.
            </summary>
            <returns>The created post</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="blogId">The unique blog id</param>
            <param name="index">The optional page to fetch</param>
            <param name="pageSize">The optional page size</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllAsync``1(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the available post items.
            </summary>
            <param name="blogId">The unique id</param>
            <param name="index">The optional page to fetch</param>
            <param name="pageSize">The optional page size</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllBySiteIdAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllBySiteIdAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets the available post items.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="slug">The blog slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllAsync``1(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="slug">The blog slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllCategoriesAsync(System.Guid)">
            <summary>
            Gets all available categories for the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The available categories</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllTagsAsync(System.Guid)">
            <summary>
            Gets all available tags for the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The available tags</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllDraftsAsync(System.Guid)">
            <summary>
            Gets the id of all posts that have a draft for
            the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The posts that have a draft</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllCommentsAsync(System.Nullable{System.Guid},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the comments available for the post with the specified id. If no post id
            is provided all comments are fetched.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetAllPendingCommentsAsync(System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the pending comments available for the post with the specified id. If no post id
            is provided all comments are fetched.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetCountAsync(System.Guid)">
            <summary>
            Gets the number of available posts in the specified archive.
            </summary>
            <param name="archiveId">The archive id</param>
            <returns>The number of posts</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the post model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetByIdAsync``1(System.Guid)">
            <summary>
            Gets the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetDraftByIdAsync(System.Guid)">
            <summary>
            Gets the draft for the post model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetDraftByIdAsync``1(System.Guid)">
            <summary>
            Gets the draft for the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetBySlugAsync(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <param name="blog">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetBySlugAsync``1(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="blog">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetBySlugAsync(System.Guid,System.String)">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <param name="blogId">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetBySlugAsync``1(System.Guid,System.String)">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="blogId">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetCategoryByIdAsync(System.Guid)">
            <summary>
            Gets the category with the id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetCategoryBySlugAsync(System.Guid,System.String)">
            <summary>
            Gets the category with the given slug.
            </summary>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetTagByIdAsync(System.Guid)">
            <summary>
            Gets the tag with the id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetTagBySlugAsync(System.Guid,System.String)">
            <summary>
            Gets the tag with the given slug.
            </summary>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.GetCommentByIdAsync(System.Guid)">
            <summary>
            Gets the comment with the given id.
            </summary>
            <param name="id">The comment id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.IPostService.SaveAsync``1(``0)">
            <summary>
            Saves the given post model.
            </summary>
            <param name="model">The post model</param>
        </member>
        <member name="M:Piranha.Services.IPostService.SaveDraftAsync``1(``0)">
            <summary>
            Saves the given post model as a draft
            </summary>
            <param name="model">The post model</param>
        </member>
        <member name="M:Piranha.Services.IPostService.SaveCommentAsync(System.Guid,Piranha.Models.Comment)">
            <summary>
            Saves the comment.
            </summary>
            <param name="model">The comment model</param>
            <param name="postId">The unique post id</param>
        </member>
        <member name="M:Piranha.Services.IPostService.SaveCommentAndVerifyAsync(System.Guid,Piranha.Models.Comment)">
            <summary>
            Saves the comment and verifies if should be approved or not.
            </summary>
            <param name="model">The comment model</param>
            <param name="postId">The unique post id</param>
        </member>
        <member name="M:Piranha.Services.IPostService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IPostService.DeleteAsync``1(``0)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPostService.DeleteCommentAsync(System.Guid)">
            <summary>
            Deletes the comment with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IPostService.DeleteCommentAsync(Piranha.Models.Comment)">
            <summary>
            Deletes the given comment.
            </summary>
            <param name="model">The comment</param>
        </member>
        <member name="M:Piranha.Services.IPostTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.IPostTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Services.IPostTypeService.SaveAsync(Piranha.Models.PostType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPostTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.IPostTypeService.DeleteAsync(Piranha.Models.PostType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.IPostTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.PostType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetByInternalIdAsync(System.String)">
            <summary>
            Gets the model with the given internal id.
            </summary>
            <param name="internalId">The unique internal i</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetByHostnameAsync(System.String)">
            <summary>
            Gets the model with the given hostname.
            </summary>
            <param name="hostname">The hostname</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetDefaultAsync">
            <summary>
            Gets the default side.
            </summary>
            <returns>The modell, or NULL if it doesnt exist</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetContentByIdAsync(System.Guid)">
            <summary>
            Gets the site content for given site id.
            </summary>
            <param name="id">Site id</param>
            <returns>The site content model</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetContentByIdAsync``1(System.Guid)">
            <summary>
            Gets the site content for given site id.
            </summary>
            <param name="id">Site id</param>
            <typeparam name="T">The site model type</typeparam>
            <returns>The site content model</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.GetSitemapAsync(System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Gets the hierachical sitemap structure.
            </summary>
            <param name="id">The optional site id</param>
            <param name="onlyPublished">If only published items should be included</param>
            <returns>The sitemap</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.SaveAsync(Piranha.Models.Site)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ISiteService.SaveContentAsync``1(System.Guid,``0)">
            <summary>
            Saves the given site content to the site with the
            given id.
            </summary>
            <param name="siteId">The site id</param>
            <param name="model">The site content model</param>
            <typeparam name="T">The site content type</typeparam>
        </member>
        <member name="M:Piranha.Services.ISiteService.CreateContentAsync``1(System.String)">
            <summary>
            Creates and initializes a new site content model of the specified type.
            </summary>
            <returns>The created site content</returns>
        </member>
        <member name="M:Piranha.Services.ISiteService.InvalidateSitemapAsync(System.Guid,System.Boolean)">
            <summary>
            Invalidates the cached version of the sitemap with the
            given id, if caching is enabled.
            </summary>
            <param name="id">The site id</param>
            <param name="updateLastModified">If the global last modified date should be updated</param>
        </member>
        <member name="M:Piranha.Services.ISiteService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ISiteService.DeleteAsync(Piranha.Models.Site)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ISiteService.RemoveSitemapFromCacheAsync(System.Guid)">
            <summary>
            Removes the sitemap from the cache.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ISiteTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ISiteTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Services.ISiteTypeService.SaveAsync(Piranha.Models.SiteType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ISiteTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ISiteTypeService.DeleteAsync(Piranha.Models.SiteType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ISiteTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.SiteType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.LanguageService.#ctor(Piranha.Repositories.ILanguageRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.LanguageService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.LanguageService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.LanguageService.GetDefaultAsync">
            <summary>
            Gets the default side.
            </summary>
            <returns>The modell</returns>
        </member>
        <member name="M:Piranha.Services.LanguageService.SaveAsync(Piranha.Models.Language)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.LanguageService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.LanguageService.DeleteAsync(Piranha.Models.Language)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.LanguageService.GetLanguages">
            <summary>
            Gets the languages from the database.
            </summary>
        </member>
        <member name="M:Piranha.Services.MediaService.#ctor(Piranha.Repositories.IMediaRepository,Piranha.Services.IParamService,Piranha.IStorage,Piranha.IImageProcessor,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The current repository</param>
            <param name="paramService">The current param service</param>
            <param name="storage">The current storage manager</param>
            <param name="cache">The optional model cache</param>
            <param name="processor">The optional image processor</param>
        </member>
        <member name="M:Piranha.Services.MediaService.GetAllByFolderIdAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all media available in the specified folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The available media</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.CountFolderItemsAsync(System.Nullable{System.Guid})">
            <inheritdoc cref="M:Piranha.Services.IMediaService.CountFolderItemsAsync(System.Nullable{System.Guid})"/>
        </member>
        <member name="M:Piranha.Services.MediaService.GetAllFoldersAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all media folders available in the specified
            folder.
            </summary>
            <param name="folderId">The optional folder id</param>
            <returns>The available media folders</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the media with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The media</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.GetByIdAsync(System.Guid[])">
            <summary>
            Get all media matching the given IDs.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Services.MediaService.GetFolderByIdAsync(System.Guid)">
            <summary>
            Gets the media folder with the given id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The media folder</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.GetStructureAsync">
            <summary>
            Gets the hierachical media structure.
            </summary>
            <returns>The media structure</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.SaveAsync(Piranha.Models.Media)">
            <summary>
            Updates the meta data for the given media model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.MediaService.SaveAsync(Piranha.Models.MediaContent)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="content">The content to save</param>
        </member>
        <member name="M:Piranha.Services.MediaService.SaveFolderAsync(Piranha.Models.MediaFolder)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.MediaService.MoveAsync(Piranha.Models.Media,System.Nullable{System.Guid})">
            <summary>
            Moves the media to the folder with the specified id.
            </summary>
            <param name="model">The model</param>
            <param name="folderId">The folder id</param>
        </member>
        <member name="M:Piranha.Services.MediaService.EnsureVersion(System.Guid,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Ensures that the image version with the given size exsists
            and returns its public URL.
            </summary>
            <param name="id">The unique id</param>
            <param name="width">The requested width</param>
            <param name="height">The optionally requested height</param>
            <returns>The public URL</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.EnsureVersionAsync(System.Guid,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Ensures that the image version with the given size exsists
            and returns its public URL.
            </summary>
            <param name="id">The unique id</param>
            <param name="width">The requested width</param>
            <param name="height">The optionally requested height</param>
            <returns>The public URL</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the media with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.MediaService.DeleteAsync(Piranha.Models.Media)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The media</param>
        </member>
        <member name="M:Piranha.Services.MediaService.DeleteFolderAsync(System.Guid)">
            <summary>
            Deletes the media folder with the given id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.MediaService.DeleteFolderAsync(Piranha.Models.MediaFolder)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The media</param>
        </member>
        <member name="M:Piranha.Services.MediaService.OnLoad(Piranha.Models.Media)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.MediaService.OnFolderLoad(Piranha.Models.MediaFolder)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.MediaService.RemoveFromCache(Piranha.Models.Media)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.MediaService.RemoveFromCache(Piranha.Models.MediaFolder)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.MediaService.RemoveStructureFromCache">
            <summary>
            Removes the media structure from cache.
            </summary>
        </member>
        <member name="M:Piranha.Services.MediaService.GetResourceName(Piranha.Models.Media,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the media resource name.
            </summary>
            <param name="media">The media object</param>
            <param name="width">Optional requested width</param>
            <param name="height">Optional requested height</param>
            <param name="extension">Optional requested extension</param>
            <returns>The name</returns>
        </member>
        <member name="M:Piranha.Services.MediaService.GetPublicUrl(Piranha.Models.Media,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the public url for the given media.
            </summary>
            <param name="media">The media object</param>
            <param name="width">Optional requested width</param>
            <param name="height">Optional requested height</param>
            <param name="extension">Optional requested extension</param>
            <returns>The name</returns>
        </member>
        <member name="M:Piranha.Services.PageService.#ctor(Piranha.Repositories.IPageRepository,Piranha.Services.IContentFactory,Piranha.Services.ISiteService,Piranha.Services.IParamService,Piranha.Services.IMediaService,Piranha.ICache,Piranha.ISearch)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="factory">The content facory</param>
            <param name="siteService">The site service</param>
            <param name="paramService">The param service</param>
            <param name="mediaService">The media service</param>
            <param name="cache">The optional model cache</param>
            <param name="search">The optional content search</param>
        </member>
        <member name="M:Piranha.Services.PageService.CreateAsync``1(System.String)">
            <summary>
            Creates and initializes a new page of the specified type.
            </summary>
            <returns>The created page</returns>
        </member>
        <member name="M:Piranha.Services.PageService.CopyAsync``1(``0)">
            <summary>
            Creates and initializes a copy of the given page.
            </summary>
            <param name="originalPage">The orginal page</param>
            <returns>The created copy</returns>
        </member>
        <member name="M:Piranha.Services.PageService.DetachAsync``1(``0)">
            <summary>
            Detaches a copy and initializes it as a standalone page
            </summary>
            <returns>The standalone page</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllAsync(System.Nullable{System.Guid})">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllBlogsAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the available blog pages for the current site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The pages</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllBlogsAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets the available blog pages for the current site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The pages</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllDraftsAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the id of all pages that have a draft for
            the specified site.
            </summary>
            <param name="siteId">The unique site id</param>
            <returns>The pages that have a draft</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllCommentsAsync(System.Nullable{System.Guid},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the pending comments available for the page with the specified id. If no page id
            is provided all comments are fetched.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllPendingCommentsAsync(System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the pending comments available for the page with the specified id. If no page id
            is provided all comments are fetched.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetStartpageAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the site startpage.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetStartpageAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets the site startpage.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the page model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetByIdAsync``1(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetByIdsAsync``1(System.Guid[])">
            <summary>
            Gets the page models with the specified id's.
            </summary>
            <param name="ids">The unique id's</param>
            <returns>The page models</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetBySlugAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the page model with the specified slug.
            </summary>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetBySlugAsync``1(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the page model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The page model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetIdBySlugAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the id for the page with the given slug.
            </summary>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional page id</param>
            <returns>The id</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetDraftByIdAsync(System.Guid)">
            <summary>
            Gets the draft for the page model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.PageService.GetDraftByIdAsync``1(System.Guid)">
            <summary>
            Gets the draft for the page model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.PageService.MoveAsync``1(``0,System.Nullable{System.Guid},System.Int32)">
            <summary>
            Moves the current page in the structure.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="model">The page to move</param>
            <param name="parentId">The new parent id</param>
            <param name="sortOrder">The new sort order</param>
        </member>
        <member name="M:Piranha.Services.PageService.GetCommentByIdAsync(System.Guid)">
            <summary>
            Gets the comment with the given id.
            </summary>
            <param name="id">The comment id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.SaveAsync``1(``0)">
            <summary>
            Saves the given page model
            </summary>
            <param name="model">The page model</param>
        </member>
        <member name="M:Piranha.Services.PageService.SaveDraftAsync``1(``0)">
            <summary>
            Saves the given page model as a draft
            </summary>
            <param name="model">The page model</param>
        </member>
        <member name="M:Piranha.Services.PageService.GetAllCommentsAsync(System.Nullable{System.Guid},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the comments available for the page with the specified id.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="onlyPending">If only pending comments should be fetched</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.PageService.SaveAsync``1(``0,System.Boolean)">
            <summary>
            Saves the given page model
            </summary>
            <param name="model">The page model</param>
            <param name="isDraft">If we're saving as a draft</param>
        </member>
        <member name="M:Piranha.Services.PageService.SaveCommentAsync(System.Guid,Piranha.Models.PageComment)">
            <summary>
            Saves the comment.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="model">The comment model</param>
        </member>
        <member name="M:Piranha.Services.PageService.SaveCommentAndVerifyAsync(System.Guid,Piranha.Models.PageComment)">
            <summary>
            Saves the comment and verifies if should be approved or not.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="model">The comment model</param>
        </member>
        <member name="M:Piranha.Services.PageService.SaveCommentAsync(System.Guid,Piranha.Models.Comment,System.Boolean)">
            <summary>
            Saves the comment.
            </summary>
            <param name="pageId">The unique page id</param>
            <param name="model">The comment model</param>
            <param name="verify">If comment verification should be applied</param>
        </member>
        <member name="M:Piranha.Services.PageService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.PageService.DeleteAsync``1(``0)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PageService.DeleteCommentAsync(System.Guid)">
            <summary>
            Deletes the comment with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.PageService.DeleteCommentAsync(Piranha.Models.Comment)">
            <summary>
            Deletes the given comment.
            </summary>
            <param name="model">The comment</param>
        </member>
        <member name="M:Piranha.Services.PageService.MapOriginalAsync``1(``0)">
            <summary>
            Merges the given model with the original model and
            returns it as a new instance.
            </summary>
            <param name="model">The model</param>
            <typeparam name="T">The model type</typeparam>
            <returns>The new merged model</returns>
        </member>
        <member name="M:Piranha.Services.PageService.EnsureSiteIdAsync(System.Nullable{System.Guid})">
            <summary>
            Checks if the given site id is empty, and if so
            gets the site id of the default site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The site id</returns>
        </member>
        <member name="M:Piranha.Services.PageService.OnLoadAsync(Piranha.Models.PageBase,System.Boolean)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
            <param name="isDraft">If this is a draft</param>
        </member>
        <member name="M:Piranha.Services.PageService.RemoveFromCache(Piranha.Models.PageBase)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PageService.IsPublished(Piranha.Models.PageBase)">
            <summary>
            Checks if the given page is published
            </summary>
            <param name="model">The page model</param>
            <returns>If the page is published</returns>
        </member>
        <member name="M:Piranha.Services.PageTypeService.#ctor(Piranha.Repositories.IPageTypeRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.PageTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.PageTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PageTypeService.SaveAsync(Piranha.Models.PageType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PageTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.PageTypeService.DeleteAsync(Piranha.Models.PageType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PageTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.PageType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.PageTypeService.GetTypes">
            <summary>
            Reloads the page types from the database.
            </summary>
        </member>
        <member name="M:Piranha.Services.ParamService.#ctor(Piranha.Repositories.IParamRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.ParamService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.ParamService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.ParamService.GetByKeyAsync(System.String)">
            <summary>
            Gets the model with the given key.
            </summary>
            <param name="key">The unique key</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.ParamService.SaveAsync(Piranha.Models.Param)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ParamService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.ParamService.DeleteAsync(Piranha.Models.Param)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ParamService.OnLoad(Piranha.Models.Param)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.ParamService.RemoveFromCache(Piranha.Models.Param)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PostService.#ctor(Piranha.Repositories.IPostRepository,Piranha.Services.IContentFactory,Piranha.Services.ISiteService,Piranha.Services.IPageService,Piranha.Services.IParamService,Piranha.Services.IMediaService,Piranha.ICache,Piranha.ISearch)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="factory">The content factory</param>
            <param name="siteService">The site service</param>
            <param name="pageService">The page service</param>
            <param name="paramService">The param service</param>
            <param name="mediaService">The media service</param>
            <param name="cache">The optional model cache</param>
            <param name="search">The optional search service</param>
        </member>
        <member name="M:Piranha.Services.PostService.CreateAsync``1(System.String)">
            <summary>
            Creates and initializes a new post of the specified type.
            </summary>
            <returns>The created post</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="blogId">The unique blog id</param>
            <param name="index">The optional page to fetch</param>
            <param name="pageSize">The optional page size</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllAsync``1(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the available post items.
            </summary>
            <param name="blogId">The unique id</param>
            <param name="index">The optional page to fetch</param>
            <param name="pageSize">The optional page size</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllBySiteIdAsync(System.Nullable{System.Guid})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllBySiteIdAsync``1(System.Nullable{System.Guid})">
            <summary>
            Gets the available post items.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="slug">The blog slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllAsync``1(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the available posts for the specified blog.
            </summary>
            <param name="slug">The blog slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllCategoriesAsync(System.Guid)">
            <summary>
            Gets all available categories for the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The available categories</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllTagsAsync(System.Guid)">
            <summary>
            Gets all available tags for the specified blog.
            </summary>
            <param name="blogId">The blog id</param>
            <returns>The available tags</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllDraftsAsync(System.Guid)">
            <summary>
            Gets the id of all posts that have a draft for
            the specified blog.
            </summary>
            <param name="blogId">The unique blog id</param>
            <returns>The posts that have a draft</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllCommentsAsync(System.Nullable{System.Guid},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the comments available for the post with the specified id.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllPendingCommentsAsync(System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the pending comments available for the post with the specified id. If no post id
            is provided all comments are fetched.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetCountAsync(System.Guid)">
            <summary>
            Gets the number of available posts in the specified archive.
            </summary>
            <param name="archiveId">The archive id</param>
            <returns>The number of posts</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the post model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetByIdAsync``1(System.Guid)">
            <summary>
            Gets the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetBySlugAsync(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <param name="blog">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetBySlugAsync``1(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="blog">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <param name="siteId">The optional site id</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetBySlugAsync(System.Guid,System.String)">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <param name="blogId">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetBySlugAsync``1(System.Guid,System.String)">
            <summary>
            Gets the post model with the specified slug.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="blogId">The unique blog slug</param>
            <param name="slug">The unique slug</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetDraftByIdAsync(System.Guid)">
            <summary>
            Gets the draft for the post model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetDraftByIdAsync``1(System.Guid)">
            <summary>
            Gets the draft for the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <returns>The draft, or null if no draft exists</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetCategoryBySlugAsync(System.Guid,System.String)">
            <summary>
            Gets the category with the given slug.
            </summary>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetCategoryByIdAsync(System.Guid)">
            <summary>
            Gets the category with the id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetTagBySlugAsync(System.Guid,System.String)">
            <summary>
            Gets the tag with the given slug.
            </summary>
            <param name="blogId">The blog id</param>
            <param name="slug">The unique slug</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetTagByIdAsync(System.Guid)">
            <summary>
            Gets the category with the id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.GetCommentByIdAsync(System.Guid)">
            <summary>
            Gets the comment with the given id.
            </summary>
            <param name="id">The comment id</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.SaveAsync``1(``0)">
            <summary>
            Saves the given post model
            </summary>
            <param name="model">The post model</param>
        </member>
        <member name="M:Piranha.Services.PostService.SaveDraftAsync``1(``0)">
            <summary>
            Saves the given post model as a draft
            </summary>
            <param name="model">The post model</param>
        </member>
        <member name="M:Piranha.Services.PostService.SaveCommentAsync(System.Guid,Piranha.Models.Comment)">
            <summary>
            Saves the comment.
            </summary>
            <param name="model">The comment model</param>
            <param name="postId">The unique post id</param>
        </member>
        <member name="M:Piranha.Services.PostService.SaveCommentAndVerifyAsync(System.Guid,Piranha.Models.Comment)">
            <summary>
            Saves the comment and verifies if should be approved or not.
            </summary>
            <param name="model">The comment model</param>
            <param name="postId">The unique post id</param>
        </member>
        <member name="M:Piranha.Services.PostService.GetAllCommentsAsync(System.Nullable{System.Guid},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the comments available for the post with the specified id.
            </summary>
            <param name="postId">The unique post id</param>
            <param name="onlyApproved">If only approved comments should be fetched</param>
            <param name="onlyPending">If only pending comments should be fetched</param>
            <param name="page">The optional page number</param>
            <param name="pageSize">The optional page size</param>
            <returns>The available comments</returns>
        </member>
        <member name="M:Piranha.Services.PostService.SaveCommentAsync(System.Guid,Piranha.Models.Comment,System.Boolean)">
            <summary>
            Saves the comment.
            </summary>
            <param name="model">The comment model</param>
            <param name="postId">The unique post id</param>
            <param name="verify">If default moderation settings should be applied</param>
        </member>
        <member name="M:Piranha.Services.PostService.SaveAsync``1(``0,System.Boolean)">
            <summary>
            Saves the given post model
            </summary>
            <param name="model">The post model</param>
            <param name="isDraft">If the model should be saved as a draft</param>
        </member>
        <member name="M:Piranha.Services.PostService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.PostService.DeleteAsync``1(``0)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PostService.DeleteCommentAsync(System.Guid)">
            <summary>
            Deletes the comment with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.PostService.DeleteCommentAsync(Piranha.Models.Comment)">
            <summary>
            Deletes the given comment.
            </summary>
            <param name="model">The comment</param>
        </member>
        <member name="M:Piranha.Services.PostService.GetByIdAsync``1(System.Guid,System.Collections.Generic.IList{Piranha.Models.PageInfo})">
            <summary>
            Gets the post model with the specified id.
            </summary>
            <typeparam name="T">The model type</typeparam>
            <param name="id">The unique id</param>
            <param name="blogPages">The blog pages</param>
            <returns>The post model</returns>
        </member>
        <member name="M:Piranha.Services.PostService.EnsureSiteIdAsync(System.Nullable{System.Guid})">
            <summary>
            Checks if the given site id is empty, and if so
            gets the site id of the default site.
            </summary>
            <param name="siteId">The optional site id</param>
            <returns>The site id</returns>
        </member>
        <member name="M:Piranha.Services.PostService.OnLoadAsync(Piranha.Models.PostBase,Piranha.Models.PageInfo,System.Boolean)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
            <param name="blog">The blog page the post belongs to</param>
            <param name="isDraft">If this is a draft</param>
        </member>
        <member name="M:Piranha.Services.PostService.RemoveFromCache(Piranha.Models.PostBase)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="post">The post</param>
        </member>
        <member name="M:Piranha.Services.PostService.IsPublished(Piranha.Models.PostBase)">
            <summary>
            Checks if the given post is published
            </summary>
            <param name="model">The posts model</param>
            <returns>If the post is published</returns>
        </member>
        <member name="M:Piranha.Services.PostTypeService.#ctor(Piranha.Repositories.IPostTypeRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.PostTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.PostTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Services.PostTypeService.SaveAsync(Piranha.Models.PostType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PostTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.PostTypeService.DeleteAsync(Piranha.Models.PostType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.PostTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.PostType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.PostTypeService.GetTypes">
            <summary>
            Reloads the page types from the database.
            </summary>
        </member>
        <member name="M:Piranha.Services.SiteService.#ctor(Piranha.Repositories.ISiteRepository,Piranha.Services.IContentFactory,Piranha.Services.ILanguageService,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="factory">The content factory</param>
            <param name="langService">The language service</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.SiteService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetByIdAsync(System.Guid)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
            <returns>The model, or null if it doesn't exist</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetByInternalIdAsync(System.String)">
            <summary>
            Gets the model with the given internal id.
            </summary>
            <param name="internalId">The unique internal i</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetByHostnameAsync(System.String)">
            <summary>
            Gets the model with the given hostname.
            </summary>
            <param name="hostname">The hostname</param>
            <returns>The model</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetDefaultAsync">
            <summary>
            Gets the default side.
            </summary>
            <returns>The model, or NULL if it does not exist</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetContentByIdAsync(System.Guid)">
            <summary>
            Gets the site content for given site id.
            </summary>
            <param name="id">Site id</param>
            <returns>The site content model</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetContentByIdAsync``1(System.Guid)">
            <summary>
            Gets the site content for given site id.
            </summary>
            <param name="id">Site id</param>
            <typeparam name="T">The site model type</typeparam>
            <returns>The site content model</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.GetSitemapAsync(System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Gets the hierachical sitemap structure.
            </summary>
            <param name="id">The optional site id</param>
            <param name="onlyPublished">If only published items should be included</param>
            <returns>The sitemap</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.SaveAsync(Piranha.Models.Site)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteService.SaveContentAsync``1(System.Guid,``0)">
            <summary>
            Saves the given site content to the site with the
            given id.
            </summary>
            <param name="siteId">The site id</param>
            <param name="model">The site content model</param>
            <typeparam name="T">The site content type</typeparam>
        </member>
        <member name="M:Piranha.Services.SiteService.CreateContentAsync``1(System.String)">
            <summary>
            Creates and initializes a new site content model of the specified type.
            </summary>
            <returns>The created site content</returns>
        </member>
        <member name="M:Piranha.Services.SiteService.InvalidateSitemapAsync(System.Guid,System.Boolean)">
            <summary>
            Invalidates the cached version of the sitemap with the
            given id, if caching is enabled.
            </summary>
            <param name="id">The site id</param>
            <param name="updateLastModified">If the global last modified date should be updated</param>
        </member>
        <member name="M:Piranha.Services.SiteService.DeleteAsync(System.Guid)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.SiteService.DeleteAsync(Piranha.Models.Site)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteService.RemoveSitemapFromCacheAsync(System.Guid)">
            <summary>
            Removes the sitemap from the cache.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.SiteService.OnLoad(Piranha.Models.Site)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteService.OnLoadContentAsync(Piranha.Models.SiteContentBase)">
            <summary>
            Processes the model on load.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteService.RemoveFromCache(Piranha.Models.Site)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteService.RemoveContentFromCache``1(``0)">
            <summary>
            Removes the given model from cache.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.#ctor(Piranha.Repositories.ISiteTypeRepository,Piranha.ICache)">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">The main repository</param>
            <param name="cache">The optional model cache</param>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.GetAllAsync">
            <summary>
            Gets all available models.
            </summary>
            <returns>The available models</returns>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.GetByIdAsync(System.String)">
            <summary>
            Gets the model with the specified id.
            </summary>
            <param name="id">The unique i</param>
            <returns></returns>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.SaveAsync(Piranha.Models.SiteType)">
            <summary>
            Adds or updates the given model in the database
            depending on its state.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.DeleteAsync(System.String)">
            <summary>
            Deletes the model with the specified id.
            </summary>
            <param name="id">The unique id</param>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.DeleteAsync(Piranha.Models.SiteType)">
            <summary>
            Deletes the given model.
            </summary>
            <param name="model">The model</param>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.DeleteAsync(System.Collections.Generic.IEnumerable{Piranha.Models.SiteType})">
            <summary>
            Deletes the given models.
            </summary>
            <param name="models">The models</param>
        </member>
        <member name="M:Piranha.Services.SiteTypeService.GetTypes">
            <summary>
            Reloads the page types from the database.
            </summary>
        </member>
        <member name="T:Piranha.Utils">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:Piranha.Utils.Subset``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets a subset of the given array as a new array.
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="arr">The array</param>
            <param name="startpos">The startpos</param>
            <param name="length">The length</param>
            <returns>The new array</returns>
        </member>
        <member name="M:Piranha.Utils.GenerateSlug(System.String,System.Boolean)">
            <summary>
            Generates a slug from the given string.
            </summary>
            <param name="str">The string</param>
            <param name="hierarchical">If forward slashes should be allowed</param>
            <returns>The slug</returns>
        </member>
        <member name="M:Piranha.Utils.GenerateInteralId(System.String)">
            <summary>
            Generates a camel cased internal id from the given string.
            </summary>
            <param name="str">The string</param>
            <returns>The internal id</returns>
        </member>
        <member name="M:Piranha.Utils.GenerateETag(System.String,System.DateTime)">
            <summary>
            Generates a ETag from the given name and date.
            </summary>
            <param name="name">The resource name</param>
            <param name="date">The modification date</param>
            <returns>The etag</returns>
        </member>
        <member name="M:Piranha.Utils.GenerateGravatarUrl(System.String,System.Int32)">
            <summary>
            Gets the gravatar URL from the given parameters.
            </summary>
            <param name="email">The email address</param>
            <param name="size">The requested size</param>
            <returns>The gravatar URL</returns>
        </member>
        <member name="M:Piranha.Utils.FormatByteSize(System.Double)">
             <summary>
            
             </summary>
             <param name="bytes"></param>
             <returns></returns>
        </member>
        <member name="M:Piranha.Utils.FirstParagraph(System.String)">
            <summary>
            Gets the first paragraph from the given html string.
            </summary>
            <param name="str">The string</param>
            <returns>The first paragraph</returns>
        </member>
        <member name="M:Piranha.Utils.FirstParagraph(Piranha.Extend.Fields.MarkdownField)">
            <summary>
            Gets the first paragraph from the given markdown field.
            </summary>
            <param name="md">The field</param>
            <returns>The first paragraph</returns>
        </member>
        <member name="M:Piranha.Utils.FirstParagraph(Piranha.Extend.Fields.HtmlField)">
            <summary>
            Gets the first paragraph from the given html field.
            </summary>
            <param name="html">The field</param>
            <returns>The first paragraph</returns>
        </member>
        <member name="M:Piranha.Utils.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Gets the formatted three digit version number of the given assembly.
            </summary>
            <param name="assembly">The assembly</param>
            <returns>The version string</returns>
        </member>
        <member name="M:Piranha.Utils.IsPreRelease(System.Reflection.Assembly)">
            <summary>
            Checks if the given assembly is a pre-release.
            </summary>
            <param name="assembly">The assembly</param>
            <returns>If it is a pre-release</returns>
        </member>
        <member name="M:Piranha.Utils.DeepClone``1(``0)">
            <summary>
            Clones the entire given object into a new instance.
            </summary>
            <param name="obj">The object to clone</param>
            <typeparam name="T">The object type</typeparam>
            <returns>The cloned instance</returns>
        </member>
        <member name="M:Piranha.Utils.GetPropertyValue(System.Type,System.String,System.Object)">
            <summary>
            Gets the value of the property with the given name for the
            given instance.
            </summary>
            <param name="type">The current type</param>
            <param name="propertyName">The property name</param>
            <param name="instance">The object instance</param>
            <returns>The property value</returns>
        </member>
        <member name="M:Piranha.Utils.SetPropertyValue(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the value of the property with the given name for the
            given instance.
            </summary>
            <param name="type">The current type</param>
            <param name="propertyName">The property name</param>
            <param name="instance">The object instance</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Piranha.Utils.GetFieldSettings(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute defined settings for the given property.
            </summary>
            <param name="prop">The property info</param>
            <returns>The settings</returns>
        </member>
        <member name="M:Piranha.Web.AliasRouter.InvokeAsync(Piranha.IApi,System.String,System.Guid)">
            <summary>
            Invokes the router.
            </summary>
            <param name="api">The current api</param>
            <param name="url">The requested url</param>
            <param name="siteId">The requested site id</param>
            <returns>The piranha response, null if no matching page was found</returns>
        </member>
        <member name="M:Piranha.Web.ArchiveRouter.InvokeAsync(Piranha.IApi,System.String,System.Guid)">
            <summary>
            Invokes the router.
            </summary>
            <param name="api">The current api</param>
            <param name="url">The requested url</param>
            <param name="siteId">The requested site id</param>
            <returns>The piranha response, null if no matching page was found</returns>
        </member>
        <member name="P:Piranha.Web.HttpCacheInfo.EntityTag">
            <summary>
            Gets/sets the entity tag.
            </summary>
        </member>
        <member name="P:Piranha.Web.HttpCacheInfo.LastModified">
            <summary>
            Gets/sets the last modification date.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.PageId">
            <summary>
            Gets/sets the page id.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.Route">
            <summary>
            Gets/sets the route.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.QueryString">
            <summary>
            Gets/sets the optional query string.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.RedirectUrl">
            <summary>
            Gets/sets the optional redirect url.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.IsPublished">
            <summary>
            Gets/sets if the route is published or not.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.RedirectType">
            <summary>
            Gets/sets the redirect type.
            </summary>
        </member>
        <member name="P:Piranha.Web.IRouteResponse.CacheInfo">
            <summary>
            Gets/sets the cache info.
            </summary>
        </member>
        <member name="M:Piranha.Web.PageRouter.InvokeAsync(Piranha.IApi,System.String,System.Guid)">
            <summary>
            Invokes the router.
            </summary>
            <param name="api">The current api</param>
            <param name="url">The requested url</param>
            <param name="siteId">The requested site id</param>
            <returns>The piranha response, null if no matching page was found</returns>
        </member>
        <member name="M:Piranha.Web.PostRouter.InvokeAsync(Piranha.IApi,System.String,System.Guid)">
            <summary>
            Invokes the router.
            </summary>
            <param name="api">The current api</param>
            <param name="url">The requested url</param>
            <param name="siteId">The requested site id</param>
            <returns>The piranha response, null if no matching post was found</returns>
        </member>
        <member name="P:Piranha.Web.RouteResponse.PageId">
            <summary>
            Gets/sets the page id.
            </summary>
        </member>
        <member name="P:Piranha.Web.RouteResponse.Route">
            <summary>
            Gets/sets the route.
            </summary>
        </member>
        <member name="P:Piranha.Web.RouteResponse.QueryString">
            <summary>
            Gets/sets the optional query string.
            </summary>
        </member>
        <member name="P:Piranha.Web.RouteResponse.RedirectUrl">
            <summary>
            Gets/sets the optional redirect url.
            </summary>
        </member>
        <member name="P:Piranha.Web.RouteResponse.IsPublished">
            <summary>
            Gets/sets if the route is published or not.
            </summary>
        </member>
        <member name="P:Piranha.Web.RouteResponse.RedirectType">
            <summary>
            Gets/sets the redirect type.
            </summary>
        </member>
        <member name="P:Piranha.Web.RouteResponse.CacheInfo">
            <summary>
            Gets/sets the cache info.
            </summary>
        </member>
        <member name="M:Piranha.Web.StartPageRouter.InvokeAsync(Piranha.IApi,System.String,System.Guid)">
            <summary>
            Invokes the router.
            </summary>
            <param name="api">The current api</param>
            <param name="url">The requested url</param>
            <param name="siteId">The site id</param>
            <returns>The piranha response, null if no matching page was found</returns>
        </member>
        <member name="M:PiranhaExtensions.Add(System.Collections.Generic.IList{Piranha.Models.Taxonomy},System.String[])">
            <summary>
            Adds the given taxonomies to the list.
            </summary>
            <param name="list">The list</param>
            <param name="titles">The taxonomies</param>
        </member>
        <member name="M:PiranhaExtensions.GetByGroupId(Piranha.Runtime.CachedList{Piranha.Models.ContentType},System.String)">
            <summary>
            Get a list content types by content group id
            </summary>
            <param name="list">The list</param>
            <param name="contentGroupId">Content group type id</param>
        </member>
        <member name="M:PiranhaStartupExtensions.AddPiranhaDistributedCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the distributed cache service for repository caching.
            </summary>
            <param name="services">The current service collection</param>
            <returns>The updated service collection</returns>
        </member>
        <member name="M:PiranhaStartupExtensions.AddPiranhaMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds the memory cache service for repository caching.
            </summary>
            <param name="services">The current service collection</param>
            <param name="clone">If returned objects should be cloned</param>
            <returns>The updated service collection</returns>
        </member>
        <member name="M:PiranhaStartupExtensions.AddPiranhaSimpleCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds the simple cache service for repository caching.
            </summary>
            <param name="services">The current service collection</param>
            <param name="clone">If returned objects should be cloned</param>
            <returns>The updated service collection</returns>
        </member>
    </members>
</doc>
